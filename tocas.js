/* 
    @#%#^@$&%$##$#$%^^        ^$&%*%$%$#                      #$%^                #&%^&&$%@%#
    #$%#$&!@$#%^^$%^*&     ^&%*^$%#%$$^&%^&%!#^$%@#$%^$#@$^ *&#&#$#            @#$%#$^&^#@$%$^&
    %^$&%*^%$%&^*^^&@#   &%*$$%#$     @@##$^%$&%^$%@#$%%^%# @$%^#$%%$         %^$&#        %#%^&
          $^&%*%       $%^$&%&          #$%$^%^@#$@#$%#^$ #!$^$  $%#$^        #!$^$        @$#$$
          %^$&%*      %^$&%*            &^%*%^           #^&&#    #$%^&       $%*$&           
          &@^!$%      #$%$^&            @#$%#^          &@!^&      *^&%^      @$#%^$%$^$%^$%&@$     ver. 1.1.9.9.9.1
          @$%^*^      *^&%^%            $%^%&$         #%^@%^       %^$^&      $&%#%$#^$&$^%^#$%
          *!*$&#      #%^$&@            #$%^$%        %#$%#          %*&^%                 $%*$&
          *&$@$!       *&^&%!           ^%&*%^%*%&#! %#$%%            $#^%$   #!$^$        @$#$$
          @#$^&#       #$%#$%$#$      ##%^&*&^@#$@# @%#^%              #^%&&   %^$&#       %#%^&
          !#$@%#         #$%^$&^$#%#$%$^%$$%^$^&^& #$%#$@#$%#^#$@^%$&^$#$#*#$  @#$%#$^&^#@$%$^& 
          @%$%&%             #^$&^$&^%&%          @#$@%@#%^&$#@$%^$*@#$#%^$%$#    #&%^&&$%@%#   
        
                                        Glad to be with you.

                           TeaMeow / Open / Colorful /  A.S.O  / Simple
                            茶葉貓  / 開闊 /  多彩多姿 / 藍.白.澄 / 簡潔

                                           Basic colors

                                  A oi    -    Blue     -    #00ADEA
                                  S hiroi -    White    -    #FFFFFF
                                  O renji -    Orange   -    #FFA500    
                   
                                        Object of elements
                         
                                          ts_eventHandler
                                       (store event handlers.)
                                       
                                         ts_longPressTimer
                              (store the timer of longpress detection.)
*/

/**
 * I learn lots of thing there, thanks:
 * 
 * ZeptoJS     - zeptojs.com
 * Slide       - http://stackoverflow.com/questions/3795481/javascript-slidedown-without-jquery
 * Serialize   - code.google.com/p/form-serialize/downloads/list
 * AvgColor    - http://tech.mozilla.com.tw/posts/5355/%E5%9C%A8-firefox-os-%E5%8F%96%E5%9C%96%E7%89%87%E8%89%B2%E5%BD%A9%E5%B9%B3%E5%9D%87%E5%80%BC%E4%B9%8B%E4%BA%8C%E4%B8%89%E4%BA%8B
 * Library     - youmightnotneedjquery.com/
 * isNumeric   - http://stackoverflow.com/questions/18082/validate-decimal-numbers-in-javascript-isnumeric
 */



/**
 * Tocas Main Library
 *
 * The main tocas code.
 */

var Tocas = (function ()
{
    var $, EmptyArray = [], Slice = EmptyArray.slice, Filter = EmptyArray.filter, Queue = [],
    tocas   = {},
    isArray = Array.isArray || function(Obj){ return Obj instanceof Array  },
    isObject                 = function(Obj){ return Obj instanceof Object },
    isEmptyOrWhiteSpace      = function(Str){ return str === null || str.match(/^\s*$/) !== null },
    dropzoneNumber           = 0

    /** Filter those thing which is we don't need it */
    function Compact(Array){ return Filter.call(Array, function(Item){ return Item != null }) }

    tocas.Init = function(Selector)
    {
        var Dom
        /** If Selector is a normal string */
        if(typeof Selector == 'string')
        {
            /** Remove the space */
            Selector = Selector.trim()
            Dom = tocas.Select(document, Selector)
        }
        else if(tocas.IsTocas(Selector)) return Selector
        else
        {
            /** Filter for eq function */
            if(isArray(Selector))
                Dom = Compact(Selector)
            /** If Selector is object, which means it may generated by Tocas */
            else if(isObject(Selector))
                Dom = [Selector], Selector = null
        }
        return tocas.Tocas(Dom, Selector)
    }
    
    tocas.IsTocas = function(Obj)
    {
        return Obj instanceof tocas.Tocas
    }
    
    tocas.Select = function(Element, Selector)
    {
        try
        {
            return Slice.call(Element.querySelectorAll(Selector))
        }
        catch(e)
        {
            console.log('TOCAS ERROR: Something wrong while selecting ' + Selector + ' element.')
        }
    }
                  
    tocas.Tocas = function(Dom, Selector)
    {
        Dom = Dom || []
        Dom.__proto__ = $.fn
        Dom.Selector = Selector || ''
        return Dom
    }
    
    
    
    
    /**
     * $
     *
     * Call to Init to get everything ready.
     */
    
    $ = function(Selector)
    {
        return tocas.Init(Selector)
    };
    
    
    
    
    /**
     * Library
     */
    
    $.fn =
    {
        /**
         * Each
         */
        
        each: function(Callback)
        {
            EmptyArray.every.call(this, function(Index, Element)
            {
                return Callback.call(Index, Element, Index) !== false
            })
            
            return this
        },
        
        
        
        
        /**
         * Slice
         */
        
        slice: function()
        {
            /** Regenerate a new object */
            return $(Slice.apply(this, arguments))
        },

        
        
        
        /**
         * Eq
         *
         * Jump to target element.
         */
        
        eq: function(Index)
        {
            return this.slice(Index, + Index + 1)
        },
     
        
        
        
        /**
         * Hide
         */
        
        hide: function()
        {
            return this.each(function()
            {
                $(this).addClass('hidden')
            })
        },
 
        
        
        
        /**
         * Show
         */
        
        show: function()
        {
            return this.each(function()
            {
                $(this).removeClass('hidden')
            })
        },
        
        
        
        /**
         * Is Hidden?
         */
         
        isHidden: function()
        {
            return $(this).hasClass('hidden')
        },
        
        
        
        
        /**
         * Toggle
         *
         * When it's showed, we hide it, but if it's hidden, then you should know it.
         */
        
        toggle: function()
        {
            return this.each(function()
            {
                if($(this).hasClass('hidden'))
                    $(this).show()
                else
                    $(this).hide()
            })
        },
        
        
        
        
        /**
         * Get CSS
         */
    
        getCSS: function(Property)
        {
            /** Get computed style */
            try
            {
                return 0 in this ? document.defaultView.getComputedStyle(this[0], null).getPropertyValue(Property) : null
            }
            catch(Err)
            {
                return null
            }
        },
        
        
        
        
        /**
         * Text
         *
         * Set textContent.
         */
    
        text: function(Text)
        {
            Text = Text || null;
            return this.each(function()
            {
                this.textContent = Text
            })
        },
        
        
        
        
        /**
         * HTML
         *
         * Set HTML if variable is not empty, otherwise we get the HTML content.
         */
    
        html: function(HTML)
        {
            HTML = HTML || null
            
            if(!HTML)
                return 0 in this ? this[0].innerHTML : null
            else 
                return this.each(function(){ this.innerHTML = HTML })
        },
        
        
        
        /**
         * Generate Date
         * 
         * Generate a date to past or future.
         */
         
        genDate: function(Type, Direction)
        {
            Type      = Type      || 'Day'
            Direction = Direction || 'Past'
            
            var Now = new Date()

            return this.each(function(index, el)
            {
                switch(Type)
                {
                    /**
                     * Year
                     */
                     
                    case 'Year':
                        var Year = Now.getFullYear()
                        
                        for(i = 0; i < 110; i++)
                        {
                            var option      = document.createElement('option');
                                option.text = (Direction == 'Past') ? Year-- 
                                                                    : Year++;
                            el.add(option);
                        }
                        break;
                    
                    
                    /**
                     * Month
                     */
                     
                    case 'Month':
                        var Month = 1
                        
                        for(i = 0; i < 12; i++)
                        {
                            var option      = document.createElement('option');
                                option.text = (Month < 10) ? '0' + Month 
                                                           :       Month;
                            Month++;
                            el.add(option);
                        }
                        break;
                        
                    
                    /**
                     * Day
                     */
                     
                    case 'Day':
                        var Day = 1
                        
                        for(i = 0; i < 31; i++)
                        {
                            var option      = document.createElement('option');
                                option.text = (Day < 10) ? '0' + Day 
                                                         :       Day;
                            Day++;
                            el.add(option);
                        }
                        break;
                }
            })
        },
        
        
        
        /**
         * Empty
         *
         * Clean value or innerHTML.
         */
        
        empty: function()
        {
            return this.each(function()
            {
                if(this.innerHTML != 'undefined') this.innerHTML = ''
                if(this.value != 'undefined')     this.value = ''
            })
        },

        
        
        
        /**
         * Val
         *
         * Set the value of element or get a value if Value is null.
         */
        
        val: function(Value)
        {
            if(Value == null)
            {
                if(0 in this)
                {
                    /** Return the value based on selected option if it's a select element*/
                    if(this[0].nodeName == 'SELECT')
                        return this[0].options[this[0].selectedIndex].value
                    else
                        return this[0].value
                }
                else
                {
                    return null
                }
            }
            else 
            {
                return this.each(function(){ this.value = Value })
            }
        },
        
        
        
        
        /**
         * On
         *
         * Add an event into the handler list.
         */
        
        on: function(EventName, Selector, Handler, Once)
        {
            Once = Once || false
            var HasSelector = true
            
            if(typeof Selector !== 'string')
            {
                HasSelector = false
                Handler     = Selector
            }
            
            if(typeof Handler !== 'function') Once = Handler
            
            /**
             * [ts_eventHandler]
             *
             *        registered   :bool
             *      /
             * Click      func :func
             *      \   /
             *       [0] 
             *          \
             *            once :bool         
             */
            
            return this.each(function()
            {
                if(typeof this.addEventListener == 'undefined')
                {
                    console.log('TOCAS ERROR: Event listener is not worked with this element.')
                    return false
                }
                /** If the main event list of the element is not existed, we create one */
                if(typeof this.ts_eventHandler == 'undefined') this.ts_eventHandler = {}
                /** Split the event by space */
                var Events = EventName.split(' ')
                
                for(var i in Events)
                {
                    var Event = Events[i]
                    
                    /** If the event handler list is not existed, we create an object, we will store function in here */
                    /** so if someone triggered the event, we can just call this list. */
                    if(typeof this.ts_eventHandler[Event] == 'undefined') this.ts_eventHandler[Event] = {registered: false, list: []}
                    
                    /** Bind if haven't bind yet */
                    if(this.ts_eventHandler[Event].registered === false)
                    {
                        this.addEventListener(Event, function(evt)
                        {
                            /** Just make sure this event still existed */
                            if(typeof this.ts_eventHandler[Event] != 'undefined')
                            {
                                /** Execute all of the functions */
                                for(var e in this.ts_eventHandler[Event].list)
                                {
                                    /** If there's a selector */
                                    if(typeof this.ts_eventHandler[Event].list[e].selector !== 'undefined')
                                    {
                                        var InSelector = false
                                        
                                        /** If this element is in the selector, then we set InSelector as true */
                                        $(this.ts_eventHandler[Event].list[e].selector).each(function(i, el)
                                        {
                                            if(evt.target === el) InSelector = true
                                        })
                                        
                                        /** We won't call this function if this elements which is triggered is not in the selector */
                                        if(!InSelector) return
                                    }
                                    
                                    /** Execute */
                                    this.ts_eventHandler[Event].list[e].func.call(this, evt)
                                    
                                    /** If "once" is true, we remove it after call it */
                                    if(this.ts_eventHandler[Event].list[e].once)
                                        delete this.ts_eventHandler[Event].list[e]
                                }
                            }
                        })
                        this.ts_eventHandler[Event].registered = true
                    }
                    
                    /** Push handler or anonymous function into that event list */
                    var eventHandler = this.ts_eventHandler[Event].list,
                        Data = {func: Handler, once: Once}
                    
                    /** Store the selector if there's selector */     
                    if(HasSelector) Data.selector = Selector
                        
                    /** Store the function info*/
                    eventHandler.push(Data)
                    this.ts_eventHandler[Event].list = eventHandler
                }
            })
        },
        

        
        
        /**
         * One
         *
         * Something that only happens once, for example: your life.
         */
        
        one: function(EventName, Selector, Handler)
        {   
            return this.each(function()
            {
                /** Set "once" true, it will auto remove once we call it */
                $(this).on(EventName, Selector, Handler, true)
            })
        },
        
        
        
        
        /**
         * Off
         *
         * Remove an event handler.
         */
        
        off: function(EventName, Handler)
        {
            return this.each(function()
            {
                /** No list no talk */
                if(typeof this.ts_eventHandler == 'undefined') return
                if(typeof this.ts_eventHandler[EventName] == 'undefined') return

                /** If there's no handler name, we remove all handler */
                if(Handler == null){ this.ts_eventHandler[EventName].list = []; return; }
                
                /** Otherwise we search for the index of function, then remove it */
                for(var e in this.ts_eventHandler[EventName].list)
                    if(Handler === this.ts_eventHandler[EventName].list[e].func) delete this.ts_eventHandler[EventName].list[e]
            })
        },
        
        
        
        
        /**
         * Ready
         *
         * Execute function after load complete.
         */
        
        ready: function(Callback)
        {
            if(0 in this)
                //if($.inArray(this['Selector'], ['document', 'body'])
                this[0].addEventListener('DOMContentLoaded', Callback)
        },
        
        
        
        /**
         * Load
         *
         * Load a html by XHR, then push the content to this element.
         */
        
        load: function(URL, Data, Callback)
        {
            if(!this.length) return this
            
            return this.each(function()
            {
                var that = this,
                    Options = {type: 'POST',
                               url: URL,
                               dataType: 'html',
                               data: Data},
                    /** Split URL to two parts, first one is the URL, second one is the selector */
                    Split = URL.split(/\s/), Selector
                
                /** If selector is existed, then we get it */
                if(Split.length > 1) Options.url = Split[0], Selector = Split[1] 
                
                Options.success = function(Result)
                {
                    var ScriptTag = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi

                    /** Replace the html, use selector if existed */
                    $(that).html(Selector ? $(document.createElement('div')).html(Result.replace(ScriptTag, ' ')).find(Selector).html() : Result)
                }
                
                $.ajax(Options)
            })
        },
        
        
        
       /**
         * Events
         */
        
        mousedown: function(Callback)
        {
            return this.each(function(){ if(!Callback) return false; this.onmousedown = Callback; })
        },
        mouseup: function(Callback)
        {
            return this.each(function(){ if(!Callback) return false; this.onmouseup = Callback; })
        },
        mousemove: function(Callback)
        {
            return this.each(function(){ if(!Callback) return false; this.onmousemove = Callback; })
        },
        click: function(Callback)
        {
            return this.each(function(){ if(!Callback) return false; this.onclick = Callback(); })
        },
        dragstart: function(Callback)
        {
            return this.each(function(){ if(!Callback) return false; this.ondragstart = Callback; })
        },
        longpress: function(Callback, ClickCallback, Timer)
        {
            /** If callback is not an number, which means it must be a function */
            if(!isNaN(ClickCallback)) Timer = ClickCallback
                                      Timer = Timer || 500
            
            return this.each(function()
            {
                $(this).mousedown(function(event)
                {
                    var that = this
                    /** Haven't trigger long press yet, so we set this to false */
                    that.ts_longPressed = false
                    this.ts_longPressTimer = setTimeout(function()
                    {
                        /** Call long press callback */
                        Callback.call(that)
                        /** Long press has been triggered */
                        that.ts_longPressed = true
                        
                    }, Timer)
                    return false
                })
                .mouseup(function(event)
                {
                    /** If it's not long press, we call the 'click' callback */
                    if(!this.ts_longPressed) if(typeof ClickCallback !== 'undefined') ClickCallback.call(this)
                    
                    clearTimeout(this.ts_longPressTimer)
                    return false
                })
                .mousemove(function(event)
                { 
                    clearTimeout(this.ts_longPressTimer)
                    return false
                })
            })
        },
        
        click: function(Callback)
        {
            return this.each(function(){ if(!Callback) return false; this.onclick = Callback })
        },
        
        
        
        
        /**
         * Trigger
         *
         * trigger an element by specific event.
         */
        
        trigger: function(Event)
        {
            return this.each(function(){ this[Event]() })
        },
        
        
        
        
        /**
         * Ripple
         *
         * The ripple effect while clicking.
         */
        
        ripple: function()
        {
            return this.each(function()
            { 
                
                $(this).on('click', function(e)
                {
                    /** Create a ink if not existed */
                    if(!$(this).find('.ink'))
                        var InkElement = $(document.createElement('span')).attr('class', 'ink').prependTo(this)

                    var InkElement = $(this).find('.ink')
                        
                    
                    
                    /** Set the width and the height of the ink */
                    if(!InkElement[0].style.height && !InkElement[0].style.width)
                    {
                        /** Get this(not the ink) width and height, and pick up the max one, set the height and the width of the ink */
                        var Max = Math.max(parseInt($(this).css('width')), parseInt($(this).css('height')))
                        
                        InkElement.css({height: Max, width: Max})
                    }
                    
                    
                    
                    /** Get where we clicked */
                    var InkWidth  = parseInt($(InkElement).css('width')),
                        InkHeight = parseInt($(InkElement).css('height')),
                        X         = e.pageX - this.getBoundingClientRect().left - InkWidth / 2,
                        Y         = e.pageY - this.getBoundingClientRect().top - InkHeight / 2
                        
                        
                    
                    /** Set the position */
                    InkElement.css({top: Y + 'px', left: X + 'px'}).cssAnimate('ripple')
                })
            })
            
        },
        
        
                             
                             
        /**
         * From Bottom
         *
         * How long did we away from the bottom? 
         */
        
        scrollBottom: function(Scroll, ReachBottom)
        {
            $(this).on('scroll', function()
            {
                var Distance = this.scrollHeight - this.scrollTop - this.clientHeight
                
                /** Call ReachBottom if user scroll to the bottom */
                if(typeof Scroll !== 'undefined' || Scroll != null) Scroll.call(this, Distance) //Pass distance from the bottom to the function.
                    
                /** Call ReachBottom if user scroll to the bottom */
                if(Distance == 0 && typeof ReachBottom !== 'undefined') ReachBottom.call(this, Distance)
            })
        },
        
        
        
        /**
         * Is Bottom
         *
         * Is reach to the bottom?
         */
        
        isBottom: function()
        {
            if(0 in this)
                if((this[0].scrollHeight - this[0].scrollTop - this[0].clientHeight) == 0)
                    return true
            else
                return false
        },
        
        
        
        
        /**
         * Slide
         *
         *
         */
        
        slide: function(Action, Callback, Speed)
        {
            Callback = Callback || false
            Speed    = Speed    || 500

            /** If callback is a number means user want to set the speed not callback, then we set speed equals callback */
            if($.isNumeric(Callback))
                Speed = Callback
                
            /** Conver the million seconds to float */
            Speed = Speed / 1000
               
            
            var El        = this[0],
                $this     = $(El),
                MaxHeight = 0
            
            var GetInfo = function()
            {
                if($this.hasClass('hidden')) $this.removeClass('hidden')
                
                var Style         = window.getComputedStyle(El),
                    Display       = Style.display,
                    Position      = Style.position,
                    Visibility    = Style.visibility,
                    PaddingTop    = Style.paddingTop,
                    PaddingRight  = Style.paddingRight,
                    PaddingBottom = Style.paddingBottom,
                    PaddingLeft   = Style.paddingLeft,
                    Padding       = PaddingTop + ' ' + PaddingRight + ' ' + PaddingBottom + ' ' + PaddingLeft,
                    MaxHeight     = Style.maxHeight.replace('px', '').replace('%', ''),
                    WantedHeight  = 0;

                /** Return the height if the element is not hidden */
                if(Display !== 'none' && MaxHeight !== '0')
                    return {
                            'WantedHeight': El.offsetHeight,
                            'Padding': Padding
                           }
                
                /** Remove the hidden style, so we can get the visible height */
                $this.css({
                           'position'  : 'absolute',
                           'visibility': 'hidden',
                           'display'   : 'block'
                          })
                
                /** Get the height */
                WantedHeight = El.offsetHeight

                /** Now we set it back to the styles before */
                $this.css({
                           'position'  : Display,
                           'visibility': Position,
                           'display'   : Visibility
                          })
            
                return {
                        'WantedHeight': WantedHeight,
                        'Padding': Padding
                       }
            }
            
            
            
            var Intailize = function()
            {
                var Info = GetInfo()
 
                /** Set the styles so we can do whatever we want >:D */
                $this.css({
                           'overflow-y': 'hidden',
                           'display'   : 'block'
                          })
                
                /** Store the max height as the attr */
                $this.attr('data-max-height', Info.WantedHeight + 'px')
                $this.attr('data-padding', Info.Padding)
            }
            
            
            
            /** If we intialize the element if we haven't intialized it before */
            if(!$this.attr('data-max-height'))
                Intailize()
                
                
            /** The callback when transition ended */
            if(typeof Callback === 'function')
                $this.one('transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd', function()
                {
                    Callback.call(El)
                })
                
                
            
            /** If we want to slide down the element, then we set the max height as the number which we setted when intialized */
            if(Action == 'down')
            {
                /** Set the height to the zero and recover the padding */
                $this.css({'max-height': '0',
                           'padding'   : $this.attr('data-padding')})
            
                
                
                setTimeout(function()
                {
                    /** Now set the animate back */
                    $this.css({
                               'transition': 'max-height ' + Speed + 's ease-in-out',
                               'max-height': $this.attr('data-max-height')
                              })
                }, 10)
                
            }
            
            /** Or set max height as 0 to make it like a slide up animation */
            else
            {
                $this.css('max-height', $this.attr('data-max-height'))

                setTimeout(function()
                {
                    /** Now set the animate back and remove the padding so we can hide the whole element */
                    $this.css({
                               'transition': 'max-height ' + Speed + 's ease-in-out',
                               'max-height': '0',
                               'padding'   : '0px 0px 0px 0px'
                              })
                }, 10)
            }
            
        
            
                          
            /** Remove the trasition */
            //$this.css('transition', 'max-height 0s ease-in-out')
            
        },
        
        
        slideDown: function(Callback, Speed)
        {
            var that = this
            Callback = Callback || false
            Speed    = Speed    || false

            $(this[0]).slide('down', Callback, Speed)
        },
        
        
        slideUp: function(Callback, Speed)
        {
            var that = this
            Callback = Callback || false
            Speed    = Speed    || false
                
            $(this[0]).slide('up', Callback, Speed)
        },
        
        
        
        
        /**
         * Dropzone
         *
         * Handle the drag and the drop events.
         */
        
        dropzone: function(Config)
        {
            Config = Config || {}
            
            /** The number we used to name the file input */
            dropzoneNumber += 1
            
            var DragEnter     = Config.dragenter     || function(){},
                DragOver      = Config.dragover      || function(){},
                Clickable     = Config.clickable     || true,
                Multiple      = Config.multiple      || false,
                ForceSingle   = Config.forceSingle   || false,
                Error         = Config.error         || function(){},
                Success       = Config.success       || function(){},
                Each          = Config.each          || function(){},
                AccpetedFiles = Config.acceptedFiles || '*',
                InputName     = Config.inputName     || 'tocas-dropzone-' + dropzoneNumber,
                Dropzone      = this

            /*
            {
                maxFilesize: 1024,
                clickable: true,
                multiple: true
                success:
                each:
                error:
                accpetedFiles: "image/*"
                dragenter:
                dragover:
                forceSingle:
            }
            
            */
            
            
            
            
            /**
             * Create Input
             *
             * Create the file upload input or use the existing element.
             */
            
            
            /** Create an invisiable file input if the input was not existed or use the eixsted element */
            var UploadInput = ($('#' + InputName).length == 0) ? document.createElement('input')
                                                               : $_('#' + InputName)    
                
            UploadInput.type          = 'file'
            UploadInput.style.display = 'none'
            UploadInput.id            = InputName
            
            if(Multiple)
                UploadInput.multiple  = 'multiple'
        
            /** Insert to the element before */
            var Parent = $(this).parent()
            $(Parent).prepend(UploadInput)

            /** Set the dropzone file input name to the dropzone */
            $(this).attr('data-dropzone-name', InputName)

            
            
            
            /**
             * Put File
             *
             * Put the files to the dropzone and store it.
             */
            
            function PutFile(Files)
            {
                var Length = Files.length,
                    dropzoneCount = $(Dropzone)[0].dropzoneCount || 0
                
                /** Store the files to the node */
                $(Dropzone)[0].files = Files
                
                /** Add the total dropped or file selected count */
                $(Dropzone)[0].dropzoneCount = dropzoneCount + Length
            }

            
            
            
            /**
             * Event Handlers
             *
             *
             */
            
            /** Allow to click the dropzone to open the upload window if the clickable was true */
            if(Clickable)
            {
                $(this).on('click'    , function(){ $('#' + InputName).trigger('click') })
                $(this).on('mouseover', function(){ $(this).css('cursor', 'pointer') })
            }
            
            
            
            /** The file input handler */
            $('#' + InputName).on('change', function()
            {
                var Files = this.files,
                    Length = Files.length
                
                /** Put files to the dropzone */
                PutFile(Files)
                
                /** Load each file and callback */
                for(var i = 0; i < Length; i++)
                    Each.call(Dropzone, Files[i])
                    
                Success.call(Dropzone, Files)
            })

            
            
            /** The main event handler */
            $(this).on('dragover dragenter drop', function(e)
            {
                /** Stop default events */
                e.stopPropagation()
                e.preventDefault()
                
                /** The callbacks */
                switch(e.type)
                {
                    case 'dragover' : DragOver.call();  break
                    case 'dragenter': DragEnter.call(); break
                }

                
                /** Only accpet the drop action */
                if(e.type != 'drop') return
                
                
                /** The datas here */
                var Data   = e.dataTransfer,
                    Files  = Data.files,
                    Length = Files.length

                
                /** Put files to the dropzone */
                PutFile(Files)
                    
                
                /** Load each file or only single file and callback */
                if(Multiple)
                    for(var i = 0; i < Length; i++)
                        Each.call(Dropzone, Files[i])
                else
                    Each.call(Dropzone, Files[0])
                    
                Success.call(Dropzone, Files)
            })
        },
        
        
        
        
        /**
         * Has Class
         */
        
        hasClass: function(Class)
        {
            if(0 in this)
                if(this[0].classList)
                    return this[0].classList.contains(Class)
                else
                    return new RegExp('(^| )' + Class + '( |$)', 'gi').test(this[0].className)
        },
        
        
        
        
        /**
         * Class List
         */
        
        classList: function()
        {
            var Classes = []
            
            if(0 in this)
                if(this[0].classList)
                    for(var i=0; i<this[0].classList.length; i++)
                        Classes.push(this[0].classList[i])
                else
                    for(var i in this[0].className.split(' '))
                        Classes.push(this[0].className.split(' ')[i])
                        
            return Classes
        },
        
        
        
        
        /**
         * Add Class
         */
        
        addClass: function(Class)
        {
            return this.each(function()
            {
                List = Class.split(' ')
                for(var i in List)
                {
                    if(this.classList)
                    {
                        this.classList.add(List[i]) 
                    }
                    else
                    {
                        this.className += ' ' + List[i]
                    }
                }
            })
        },
   
        
                             
        
        /**
         * Remove Class
         */
        
        removeClass: function(Class)
        {
            return this.each(function()
            {
                if(!Class)
                {
                    this.className = ''
                }
                else
                {
                    List = Class.split(' ')
                    for(var i in List)
                    {
                        /** If there's classList, the just remove it from classList, otherwise we replace the string which is in the (class="")*/
                        if(this.classList)
                            this.classList.remove(List[i]) 
                        else if(typeof this.className !== 'undefined')
                            this.className = this.className.replace(new RegExp('(^|\\b)' + Class.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
                    }
                }
            })
        },
                             
        
                             
        
        /**
         * Toggle Class
         */
        
        toggleClass: function(Class)
        {
            return this.each(function()
            {
                var List, Index
                
                List = Class.split(' ')
                for(var i in List)
                {
                    if(this.classList)
                    {
                        this.classList.toggle(List[i])
                    }
                    else
                    {
                        /** Split the class */
                        ObjClassList = this.className.split(' ')
                        /** Is the class in class list already? */
                        Index = List.indexOf(List[i])

                        /** If already existed, we remove it, otherwise we add it */
                        if(Index >= 0)
                            ObjClassList.splice(Index, 1)
                        else
                            ObjClassList.push(List[i])

                        this.className = List[i].join(' ')
                    }
                }
            })
        },
        
        
        
        
        /**
         * Append
         * 
         * Insert new content behind the HTML.
         */
    
        append: function(HTML)
        {
            if(HTML != null && typeof HTML == 'object')
                return this.each(function(){ this.appendChild(HTML) })
            else if(HTML != null)
                return this.each(function(){ this.innerHTML += HTML })
        },
        
        after: function(HTML)
        {
            if(HTML != null) return this.each(function(){ this.insertAdjacentHTML('afterend', HTML) })
        },
        
        before: function(HTML)
        {
            if(HTML != null) return this.each(function(){ this.insertAdjacentHTML('beforeBegin', HTML) })
        },
        
        prepend: function(HTML)
        {
            if(HTML != null) return this.each(function(){ this.parentNode.insertBefore(HTML, this.nextSibling) })
        },
        
        prependTo: function(Selector)
        {
            return this.each(function()
            {
               
                var that = this
                $(Selector).each(function()
                {
                    
                    this.appendChild(that, this.nextSibling);  
                })
            })
        },
    
        
        
        
        /**
         * Clone
         *
         * Copy an element or an node.
         */
        
        clone: function(Deep)
        {
            /** Copy child too? */
            Deep = (typeof Deep == 'undefined') ? true : Deep;

            var CloneList = []
            
            /** Clone the elements */
            this.each(function()
            {
                CloneList.push(this.cloneNode(Deep))
            })

            /** Using the elements which we cloned */
            return $(CloneList)
        },
        
        
        
        
        /**
         * Remove
         */

        remove: function()
        {
            return this.each(function(){ this.parentNode.removeChild(this) })
        },

        
        
        
        /**
         * Children
         */
        
        children: function()
        {
            var List = []
                
            this.each(function(i, el)
            { 
                /** Get child nodes */
                var ChildNodes = el.childNodes
                /** Push the child nodes to the list*/
                List.push.apply(List, ChildNodes)
            })
            
            /** Return the list with $ */
            return $(List)
        },
        
        
        
        
        /**
         * Find
         */
        
        find: function(Selector)
        {
            /** The selector must be string */
            if(typeof Selector !== 'string')
                return null
            
            var List = []

            this.each(function(i, el)
            { 
                /** Push the child nodes to the list*/
                List.push.apply(List, el.querySelectorAll(Selector))
            })
        
            /** Return the list with $ */
            return List.length ? $(List) : null
        },
        
        
        
        
        /**
         * Attr
         *
         * Set attr when value is not empty, otherwise we get the attr value.
         */
    
        attr: function(Attr, Value)
        {
            //if(typeof this.setAttribute !== 'function') return null
            
            Value = (Value === null) ? null : Value
            
            /** Set multiple Attr if Attr is object */
            if(typeof Attr === 'object' && !Value)
                return this.each(function(){ for(var i in Attr) this.setAttribute(i, Attr[i])})
            
            /** Set single attr */
            else if(Attr != null && Value != null)
                return this.each(function(){ this.setAttribute(Attr, Value) })

            /** Get single attr only if Attr is not null */
            else if(Attr != null && !Value)
                return 0 in this ? this[0].getAttribute(Attr) : null
            
            /** Or return all attrs */
            /*else
                var AttrObject = {}
                alert(Object.keys(this[0].attributes[0]))*/
        },
        
        
    
        /**
         * Remove Attr
         * 
         * Remove the attr.
         */
         
        removeAttr: function(Attr)
        {
            return this.each(function(){ this.removeAttribute(Attr) })
        },
        
        
        
        /**
         * CSS Animate
         */

        cssAnimate: function(Animate, Callback, Time)
        {
            /** Animate list */
            var AnimateList = 'slideInDown slideInLeft slideInRight slideInUp slideOutDown slideOutLeft slideOutRight slideOutUp'
            
            /** If someone using callback field as time.. */
            if(typeof Callback == 'number') Time = Callback
            
            /** Turn millionsecond to float (ex: 300 -> 0.3), then turn float to string and remove the dot (0.3 -> 03)*/
            var Timer = (Time / 1000).toString().replace('.', '')
            
            /** Select animation duration by Time */      
            Time = (typeof Time !== 'undefined') ? ' animated' + Timer + 's' : ''
            
            return this.each(function()
            {
                /** For passing $(this) to inside function */
                var that = this
                
                /** If last animation not end .. */
                //if($(this).hasClass(Animate))
                    $(this).off('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend').removeClass(AnimateList).removeClass(Animate + ' animated' + Time)
                
                /** Add animation */
                $(this).addClass(Animate + ' animated' + Time)
                       /** Once the animation end, we remove the animate class and callback **/
                       .one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function()
                       {
                           $(that).removeClass(Animate + ' animated' + Time)
                           if((typeof Callback !== 'undefined' && Callback != null) && typeof Callback !== 'number') Callback.call(that) 
                        })
            })
        },
        
        
        
        
        /**
         * Parent
         */
        
        parent: function()
        {
            return 0 in this ? $(this[0].parentNode) : null
        },
        
        
        
        
        /**
         * Parents
         *
         * Get parents, parent's parent, parent's parent's parent and par..
         */
        
        parents: function(Selector)
        {
            var that     = this,
                Selector = Selector || null,
                Parents  = []
            
            if(Selector !== null) var Selector = $(Selector)

            /** Non stop loop, until there's no parent of the element */
            while(that)
            {     
                /** Not this one, we go upper */
                that = $(that).parent()[0]

                /** No parent? */
                if(!that)
                    break;
                
                /** Push to the parents list if it's in the selector or just push it if we don't set a selector */
                if(Selector == null || (Selector !== null && Array.prototype.indexOf.call(Selector, that) !== -1))
                    Parents.push(that)
            }
            
            return $(Parents)
        },
        
        
        
        
        /**
         * Closest
         *
         * Get all the element with the selector, then check the element which we want to search for the closest thing is in the selector or not
         */
        
        closest: function(Selector)
        {
            var that     = this,
                Selector = $(Selector)

            /** Non stop loop, until there's no parent of the element */
            while(true)
            {     
                /** Not this one, we go upper */
                that = $(that).parent()[0]

                /** No parent? */
                if(!that)
                    return null;
                
                /** Is the parent in the closest selector? If it do, then the parent is the closest element which we want */
                if(Array.prototype.indexOf.call(Selector, that) !== -1)
                    return $(that)
            }
        },
         
        
        
        
        /**
         * Contains
         *
         * Is the node contains something we want?
         */
        
        contains: function(Wants)
        {
            var Selector = $(Wants),
                IsTrue   = false

            this.each(function(i, el)
            {
                var ChildNodes = el.childNodes
                
                for(var si = 0; si < Selector.length; si++)
                {
                    if(Array.prototype.indexOf.call(ChildNodes, Selector[si]) != -1)
                        IsTrue = true
                }
            })

            return IsTrue
        },

        
        
        
        /**
         * CSS
         *
         * Set CSS to elements or get CSS from elements.
         */
    
        css: function(Property, Value)
        {
            var CSS = ''
            
            /** Set single CSS : If CSS and content is not empty, then set the CSS */
            if(Property != null && Value != null)
            {
                CSS = Property + ':' + Value + ';'
            }
            /** Set multi CSS : If CSS is a Object */
            else if(typeof Property === 'object' && !Array.isArray(Property) && Value == null)
            {
                for(var i in Property) if(Property.hasOwnProperty(i)) CSS += i + ':' + Property[i] + ';'
            }
            /** Get multi CSS : If style name is a array and have only key */
            else if(Array.isArray(Property) && Value == null)
            {
                var CSSObject = {}
                this.each(function(){ for(var i in Property) CSSObject[Property[i]] = $(this).getCSS(Property[i]) })
                
                return CSSObject
            }
            /** Get single CSS : If only style name */
            else if(Property != null && Value == null)
            {
                return $(this).getCSS(Property);
            }
            
            
            return this.each(function()
            {
                if(typeof this.style == 'undefined') return
                
                this.style.cssText = this.style.cssText + CSS
            })
        },
        
        
        
        
       /**
        * Serialize
        *
        * Serialize a single or multiple form.
        *
        * @supported Dimitar Ivanov
        */
        
        serialize: function()
        {
            var Array = []

            this.each(function()
            {
                var z, a
                for (var z = 0; z < this.elements.length; z++)
                {
                    
                    var Elements = this.elements[z]
                    var Name = Elements.name
                    var Value = Elements.value

                    /** If element's name is empty or disabled or no value, we skip this one */
                    if(!Name || Elements.disabled || !Value) continue

                    switch (Elements.nodeName)
                    {
                        case 'INPUT':
                            switch(Elements.type)
                            {
                                case 'text':
                                case 'hidden':
                                case 'password':
                                case 'button':
                                case 'reset':
                                case 'submit':
                                    Array.push(Name + '=' + encodeURIComponent(Value))
                                    break

                                case 'checkbox':
                                case 'radio':
                                    /** No checked, we skip. */
                                    if(!Elements.checked) continue

                                    Array.push(Name + '=' + encodeURIComponent(Value))
                                    break

                                /*case 'file':*/
                            }
                            break

                        case 'TEXTAREA':
                            Array.push(Name + '=' + encodeURIComponent(Value))
                            break

                        case 'SELECT':
                            switch(Elements.type)
                            {
                                case 'select-one':
                                    Array.push(Name + '=' + encodeURIComponent(Value))
                                    break

                                case 'select-multiple':
                                    for(var a = 0; a < Elements.options.length; a++)
                                    {
                                        var OptionValue = Elements.options[a].value
                                        if (Elements.options[a].selected) Array.push(Name + '=' + encodeURIComponent(OptionValue))
                                    }
                            }
                            break

                        case 'BUTTON':
                            switch(Elements.type)
                            {
                                case 'reset':
                                case 'submit':
                                case 'button':
                                    Array.push(Name + '=' + encodeURIComponent(Value))
                            }
                    }  
                 }
            })

            /** Prevent sending a object or array via XHR cause an error */
            return Array.join('&').toString()
        },
        
        
        
        
        /**
         * Get Average Color
         *
         * Get average color with a image by canvas, the magic of HTML5.
         *
         * @supported Firefox Chinese Team
         */
        
        avgColor: function(Type)
        {
            Type = Type || null
            
            if(0 in this)
            {
                var Img = this[0]
                    
                /** Create a canvas for getting avg color */
                var Canvas = document.createElement('canvas')
                Canvas.width = Img.width
                Canvas.height = Img.height
                
                /** Draw this picture to the canvas */
                var Context = Canvas.getContext('2d')
                Context.drawImage(Img, 0, 0, Img.width, Img.height)

                if(Img.width <= 0 || Img.height <= 0)
                    console.log('TOCAS ERROR: The width or the height of the image which you trying to get the avg. color is lower or equal zero.')
                
                /** Get the result of the pixels */
                var Data = Context.getImageData(0, 0, Img.width, Img.height).data
                var r = 0, g = 0, b = 0

                /** Get the all average of the pixels */
                for (var Row = 0; Row < Img.height; Row++)
                {
                  for (var Col = 0; Col < Img.width; Col++)
                  {
                    r += Data[((Img.width * Row) + Col) * 4]
                    g += Data[((Img.width * Row) + Col) * 4 + 1]
                    b += Data[((Img.width * Row) + Col) * 4 + 2]
                  }
                }

                r /= (Img.width * Img.height)
                g /= (Img.width * Img.height)
                b /= (Img.width * Img.height)

                r = Math.round(r)
                g = Math.round(g)
                b = Math.round(b)

                if(Type !== null)
                {
                    switch(Type.toUpperCase())
                    {
                        case 'R'   : return r; break
                        case 'G'   : return g; break
                        case 'B'   : return b; break
                        case 'RGB' : return [r, g, b]; break;
                    }
                }
                
                /** Return the color with 16 bits */
                return '#' + ((r << 16) | (g << 8) | b).toString(16);
            }
            else
            {
                return null
            }
        }
    };

    
    
    
    /**
     * Index Of
     */
    
    $.inArray = function(Item, TargetArray)
    {
        return TargetArray.indexOf(Item)
    }
    
    
    
    
    /**
     * AJAX
     */

    $.ajax = function(Obj, Type)
    {
        if(Obj == null) return false
        
        /** Is error handler existed or not */
        var ErrorCallback = (typeof Obj.error != 'undefined')
        var IsObjectData  = (typeof Obj.data == 'object' && Obj.data.constructor != FormData)
        
        /** Default */
        if(typeof Obj.async == 'undefined')
            Obj.async = true
        if(typeof Obj.contentType == 'undefined' || Obj.contentType == null) 
            Obj.contentType = 'application/x-www-form-urlencoded; charset=UTF-8'

        XHR = new XMLHttpRequest()

        /** Set timeout */
        XHR.timeout = Obj.timeout || 10000

        XHR.onload = function()
        {
            /** Call to statusCode if existed */
            if(typeof Obj.statusCode != 'undefined' && typeof Obj.statusCode[XHR.status] != 'undefined')
                Obj.statusCode[XHR.status](XHR, XHR.responseText)
            
            if(XHR.status >= 200 && XHR.status < 400)
            {
                
                switch(Obj.dataType)
                {
                    case 'json':
                        if($.isJSON(XHR.responseText))
                            Obj.success(JSON.parse(XHR.responseText), XHR)
                        else
                            if(ErrorCallback) Obj.error(XHR, 'parsererror')
                        break                     
                    case 'html':
                    case 'text':
                    case 'string':
                    default:
                        if(typeof Obj.success == 'function') Obj.success(XHR.responseText, XHR)
                        if(typeof XHR.close == 'function')   XHR.close()
                }
            }
            else
            {
                if(ErrorCallback) Obj.error(XHR, 'success')
            }
        }
        
        /** When XHR timeout or error, we callback */
        XHR.ontimeout = function(){ if(ErrorCallback) Obj.error(XHR, 'timeout') }
        XHR.onerror   = function(){ if(ErrorCallback) Obj.error(XHR, 'error') }
        
        /** If there's uploading process callback, we callback :D */
        if(typeof Obj.uploading != 'undefined')
        {
            XHR.upload.addEventListener('progress', function(e)
            {
                if(e.lengthComputable)
                {
                    Percent = Math.round((e.loaded / e.total) * 100)
                    Obj.uploading(Percent, e)
                }
            }, false);
        }
        
        /** Open a new connect */
        XHR.open(Obj.type, Obj.url, Obj.async)
        
        /** If contentType is not FALSE, we set the request header */
        if(Obj.contentType != false) XHR.setRequestHeader('Content-Type', Obj.contentType)

        /** Set headers */
        if(typeof Obj.headers != 'undefined') for(var i in Obj.headers) XHR.setRequestHeader(i, Obj.headers[i])
        
        /** If data is an object, we convert it to params */
        
        if(IsObjectData) 
        {   
            /** explode the object into a string */
            var Params = ''
            for(var i in Obj.data) Params += i + '=' + Obj.data[i] + '&' 
            
            /** Remove the unnecessary symbol at the end */
            Params = Params.slice(0, -1)
        }
            
        /** SENDDDD! */
        XHR.send((IsObjectData) ? Params : Obj.data)
        
        return XHR
    }
    
    
    
    $.getJSON = function(URL, Return)
    {
        return $.ajax({
            url: URL,
            type: 'GET',
            dataType: 'json',
            success: Return, 
        })
    }
    
    
    
    $.isJSON = function(String)
    {
        /** Detect the type of the respone is json or not */
        var IsJSON = true
        
        try     { JSON.parse(String) }
        catch(e){ var IsJSON = false }
        
        return IsJSON
    }
    
    
    /**
     * Cookie
     *
     * Write, read, delete a cookie.
     */
    
    $.cookie = function(Name, Value, Options)
    {
        /** If value is not null, means this is SET a cookie, not GET a cookie */
        if(Value != null)
        {
            var Expire = (isObject(Options) && typeof Options.expires != 'undefined') ? Options.expires : 365
            var Domain = (isObject(Options) && typeof Options.domain  != 'undefined') ? ' domain=' + Options.domain + ';' : ''
            var Path   = ' path=' + (isObject(Options) && typeof Options.path != 'undefined' ? Options.path : '/') + ';'
            
            var d = new Date()
            
            /** If Options is not object but -1, means user want to delete this cookie, so we given a expired time */
            if(!isObject(Options) && Options === -1)
                d.setTime(d.getTime() - (24 * 60 * 60 * 1000))
            else
                d.setTime(d.getTime() + (Expire * 24 * 60 * 60 * 1000))

            /** Convert the time to cookie format */
            var Expires = 'expires=' + d.toUTCString() + ';'

            /** Set the cookie */
            document.cookie = Name + '=' + (Value || '') + '; ' + Expires + Domain + Path
        }
        else
        {
            var CookieName = Name + '='
            var List = document.cookie.split(';')
            for(var i in List)
            {
                var Cookie = List[i]

                /** If first word is blank, then get content without blank */
                while(Cookie.charAt(0)==' ') Cookie = Cookie.substring(1)

                /** Get the value of cookie*/
                if(Cookie.indexOf(CookieName) != -1) return Cookie.substring(CookieName.length, Cookie.length)
            }
        }
        
        return 'undefined'
    }
    
    
    
    
    /**
     * Event Source
     *
     * We called it SSE here, get newest update, blah blah..
     */
    
    $.sse = function(Obj)
    {
        var SSE = new EventSource(Obj.url)
        
        /** Message */
        if(typeof Obj.message == 'object') 
            for(var i in Obj.message)
                SSE.addEventListener(i, Obj.message[i], false)
        else if(typeof Obj.message !== 'undefined')
            SSE.onmessage = Obj.message
            
        /** Error */
        if(typeof Obj.error !== 'undefined')
            SSE.onerror = Obj.error
            
        /** Open */
        if(typeof Obj.open !== 'undefined')
            SSE.addEventListener('open', Obj.open, false)
    }
    
    
    
    
    /**
     * Get Script
     *
     * Something like require() in PHP.
     */
    
    $.getScript = function(URL, Callback)
    {
        /** Create a script so we can append it to the head */
        var script = document.createElement('script')

        /** Set the url of the script */
        script.src = URL
        
        /** Events */
        script.onload = Callback
        script.onreadystatechange = Callback
        script.onerror = Callback

        $('head').append(script)
    }
    
    
    
    
    /**
     * Get Parameters From URL
     *
     * Just like $_GET in PHP.
     */

    $.urlParam = function(ParamName)
    {
        /** Are we getting all parameters or just a special one? */
        var GetAll = (typeof ParamName === 'undefined')
        
        /** Get the parameters which are behind the question mark, and split it with & symbol, so we'll get an array */
        var Params = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&')
        var ParamList = {}
        
        if(Params.length == 0) return null
        
        for(var i in Params)
        {
            /** Split single parameter, so [0] is the name, [1] is the value */
            var Param = Params[i].split('=')
                Name  = Param[0],
                Value = (typeof Param[1] !== 'undefined' && Param[1] != '') ? Param[1] : '' //Return the value or just a empty string
            
            /** This is the param which we are looking for, so we return the value! */
            if(Name == ParamName) return Value
            
            /** We don't store the param which we are NOT looking for if we are NOT getting the all params */
            if(!GetAll && Name != ParamName) continue
            
            /** Otherwise we push it into an object */
            ParamList[Name] = Value
        }
        
        /** Return undefined if no param is found */
        return (Object.keys(ParamList).length) ? ParamList : undefined
    }
    
    
    
    
    /**
     * Geo
     *
     * Get the location with HTML5.
     */
    
    $.geo = function(Option)
    {
        if(typeof Option == 'undefined') return false;
        
        /** Check some options is set or null, and gives some options a default value */
        var NotSupported = (typeof Option.notSupported == 'function'),
            Error        = (typeof Option.error        == 'function'),
            Deny         = (typeof Option.deny         == 'function'),
            HighAccurary = (typeof Option.highAccurary != 'undefined') ? Option.highAccurary : false,
            Timeout      = (typeof Option.timeout      == 'number')    ? Option.timeout      : 8000,
            MaxAge       = (typeof Option.maxAge       == 'number'),
            IsFirefox    = (navigator.userAgent.toLowerCase().indexOf('firefox') > -1),
            Opt          = {
                            enableHighAccuracy: HighAccurary, 
                            timeout: Timeout
                           }
        /** Set the maximumAge if needed */
        if(MaxAge) Opt.maximumAge = MaxAge
        
        /** Set the timer for the firefox */
        /** Firefox won't give us "Denied" status, so the only thing we can do is waiting for it timeout to call deny callback*/
        if(IsFirefox)
            if(Error)
                var FirefoxTimer = setTimeout(function(){ Option.error(3) }, Timeout)
            else if(Deny)
                var FirefoxTimer = setTimeout(Option.deny, Timeout)
        
        /** Use the geolocation function if the borwser was supported the HTML5 geolocation */
        if(navigator.geolocation)
            navigator.geolocation.getCurrentPosition(function(Position)
            {
                /** Clean the firefox "denied" timer */
                if(IsFirefox) clearTimeout(FirefoxTimer)
                
                /** Call to the success callback */
                Option.success(Position)
            },
            function(ErrorCode)
            {
                var Denied    = (ErrorCode.code == ErrorCode.PERMISSION_DENIED)

                /** Clean the firefox "denied" timer */
                if(IsFirefox) clearTimeout(FirefoxTimer)
                
                /** Call error if error callback exists or deny callback when the callback exists and user denied it */
                if(Error)               Option.error(ErrorCode)
                else if(Deny && Denied) Option.deny()
                
            }, Opt)
        /** Otherwise we call the notSupported callback if existed */
        else
            if(NotSupported)
                Option.notSupported()
    }
        
        
      
        
    /**
     * Is Numeric
     *
     *
     */
    $.isNumeric = function(Number)
    {
        return !isNaN(parseFloat(Number)) && isFinite(Number);
    }
    
    
    
    
    /**
     * PJAX
     *
     * AJAX with HTML5 pushState.
     */
    
    $.pjax = function(Option)
    {
        /**
         * Option
         * {
         *     container: '#content',
         *     url: $(this).attr('href'),
         *     title: $(this).attr('data-title')
         *     dataType: 'json',
         *     contentNode: 'html',
         *     titleNode: 'title',
         *     cache: true,
         *     expire: 86400,
         *     state: {blah: 'Im blah'},
         *     success: function
         * }
         */
        
        if(typeof history.pushState !== 'function') return false
        
        /** Check url hostname */
        var FakeLink = document.createElement('a')
            FakeLink.href = Option.url
            
        if(FakeLink.host == '') FakeLink.href = FakeLink.href
    
        /** PJAX only works in same origin, so exit when cross-origin */
        if(FakeLink.hostname !== window.location.hostname) return false
    
        var PJAXFullURL = FakeLink.protocol + '//' + FakeLink.hostname + FakeLink.pathname,
            FullURL     = window.location.protocol + '//' + window.location.hostname + window.location.pathname
        
        /** Exit if the pjax url is just about add a hash or a anchor or even same */
        if(PJAXFullURL === FullURL) return false
        
    

        /**
         * PJAX
         */
        
        function PJAX(Obj)
        {
             /** Change the content */
            $(Obj.Container).html(Obj.Content)

            /** Change the url */
            window.history.pushState(Obj.State, Obj.Title, Obj.URL);

            /** Change the title */
            document.title = Obj.Title
            
            /** Callback */
            if(typeof Option.success != 'undefined') Option.success(Obj)
            
        }
        
        
        /** Set variables */
        var Title      = Option.title    || '', 
            DataType   = Option.dataType || 'html',
            URL        = Option.url,
            Expire     = Option.expire   || 3600,
            Cache      = Option.cache    || false,
            CachedName = 'cached_' + URL
        
        /** Create a state with url and title */
        var State = {url: URL, title: Title}
                
        /** Merge state if needed */
        if(typeof Option.state !== 'undefined') for(var i in Option.state) State[i] = Option.state[i]
               
        
        /**
         * Cache
         */

        /** If there's a cache in the storage */
        if(CachedName in localStorage && Cache)
        {
            /** We stored JSON format in localStorage before, now we need to convert it to object */
            var Obj = JSON.parse(localStorage.getItem(CachedName))

            /** If the state still same, we load the cache */
            /** But if we are using dynamic title(which is returned title as title), no matter what, just load the cache */
            if(JSON.stringify(Obj.State) === JSON.stringify(State) || Title === '')
            {
                var Time = Math.floor(Date.now() / 1000) - Obj.Time
                
                /** Just be sure if it's not expired yet */
                if(Expire && !(Time > Expire))
                {
                    PJAX(Obj)
                    return
                }
            }
        }
        
        
        /**
         * Request 
         */
        
        $.ajax({
            url: URL,
            type: 'GET',
            dataType: DataType,
            /** Send a PJAX header, so we can deal with it on the server side */
            headers: {'X_PJAX': 'true'},
            success: function(Result, XHR)
            {
                var Title     = (Option.dataType == 'json') ? Result[Option.titleNode]  : Option.title,
                    Content   = (Option.dataType == 'json') ? Result[Option.contentNode] : Result,
                    ScriptTag = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi

                if(Option.dataType == 'json' && typeof Result[Option.titleNode] == 'undefined')
                    if(typeof Option.title != 'undefined')
                        Title = Option.title
                    else
                        Title = ''
                
                if(Option.dataType == 'json' && typeof Result[Option.contentNode] == 'undefined')
                    Content = Result
                    
                /** Remove the script in the content */
                Content = Content.replace(ScriptTag, ' ')
                
                /** Replace the title in the state */
                State['title'] = Title
        
                var Data = {Container: Option.container, 
                            Content: Content,
                                URL: URL,
                              Title: Title,
                              State: State,
                               Time: Math.floor(Date.now() / 1000)}
                
                /** Store this PJAX to web storage as cache, localStorage don't eat object, so we conver it to json format */
                localStorage.setItem(CachedName, JSON.stringify(Data))
                
                PJAX(Data)
            }
        })
    }
    
    
    
    
    /**
     * Random
     *
     * Generate a random number.
     */
    
    $.rand = function(Min, Max)
    {
        return Math.floor(Math.random() * (Max - Min + 1) + Min)
    }
    
    if(!window.$) window.$ = $
})(Tocas);


/**
 * Secondary Selector
 *
 * For sometimes we want to use the javascript's own object not our own functions.
 */

function $_(Selector)
{
    var Obj = document.querySelectorAll(Selector);
    return (Obj.length == 0) ? false : (Obj.length == 1) ? Obj[0] : Obj;
}




/**
 * Date auto format
 *
 * Auto add the symbol between year. month. date.
 */

function DateAutoComplete(Event, Field, Type)
{
    /** Get the value */
    var FieldElement = document.getElementById(Field);
    var Len = FieldElement.value.length;
    var Val = FieldElement.value;

    var CharCode = Event.keyCode || Event.charCode;
    //alert(CharCode);
    /** CharCode <= 46 means function keys, 48-57 number keys, 96-105 right hand side number keys */
    if (CharCode <= 47 || (CharCode >= 48 && CharCode <= 57)) 
    {
        /** If the key is not function key (ex: delete) */
        if(!(CharCode <= 47) && Len < 10)
        {
            /** Auto format */
            switch(Type)
            {
                case 'YYYY-MM-DD': if([4,7].indexOf(Len)!=-1) Val+='-'; break;
                case 'YYYY/MM/DD': if([4,7].indexOf(Len)!=-1) Val+='/'; break;
                case 'MM-DD-YYYY': 
                case 'DD-MM-YYYY': if([2,5].indexOf(Len)!=-1) Val+='-'; break;
            }
            
            FieldElement.value = Val;
            return true;
        }
        
        /** If user manual type "-" or "/" symbol */
        else if(([45,109,47,111].indexOf(CharCode)!=-1) && Len < 10)
        {
            switch(Type)
            {
                case 'YYYY-MM-DD': if([4,7].indexOf(Len)!=-1 && [45,109].indexOf(CharCode)!=-1) return true; break;
                case 'YYYY/MM/DD': if([4,7].indexOf(Len)!=-1 && [47,111].indexOf(CharCode)!=-1) return true; break;
                case 'MM-DD-YYYY':
                case 'DD-MM-YYYY': if([2,5].indexOf(Len)!=-1 && [45,109].indexOf(CharCode)!=-1) return true; break;
            }
        }
        
        /** System keys */
        else if(CharCode <= 47)
        {
            return true;
        }
    }
    /** Block other keys */
    return false;
}




/**
 * Validate Form
 *
 * Validate the each field of the form which is we want to validate.
 */

function ValidateForm(Array, Type, Val, Val2, Required, StringType, Display, Callback)
{
    /** Set true at the start */
    ValidateFormPass = true;
    
    /** Failed function */
    function VF_Failed(Field, Display)
    {
        var FieldElement = document.getElementById(Field);
        
        /** display the message element if has */
        if (Display != '') document.getElementById(Display).style.display = 'block';
        
        /** Remove success style and add the failed style on it */
        FieldElement.classList.remove('vf-passed');  //Remove
        FieldElement.classList.add('vf-failed');     //Add

        /** Return false */
        ValidateFormPass = false;
    }
    
    for(var i in Array)
    {
        var Field = Array[i][0];
        var Type = Array[i][1];
        var Val = Array[i][2];
        var Val2 = Array[i][3];
        var Required = (Array[i][4] || '');
        var StringType = (Array[i][5] || '');
        var Display = (Array[i][6] || '');
        
        var FieldElement = document.getElementById(Field);
        
        /** Hide the display message first */
        if (Display != '') document.getElementById(Display).style.display = 'none';
        
        /** Remove the failed style and add the success style(it will be replace if the field is wrong.) */
        FieldElement.classList.remove('vf-failed'); //Remove
        FieldElement.classList.add('vf-passed');    //Add

        /** Get the field value */
        var FieldValue = FieldElement.value; 
        
        /** If the field is required but it's empty */
        if(Required.toUpperCase == 'R' && (!FieldValue || !(/^\s*$/.test(FieldValue)) || FieldValue.length == 0)) VF_Failed(Field, Display);
        
        switch(StringType)
        {
            case 'a-Z':
                if(!(/^[a-zA-Z]+$/.test(FieldValue))) VF_Failed(Field, Display);
                break;
                
            case 'A-Z':
                if(!(/^[A-Z]+$/.test(FieldValue))) VF_Failed(Field, Display);
                break;
                
            case '0-9':
                if(!(/^[0-9]+$/.test(FieldValue))) VF_Failed(Field, Display);
                break;
                
            case 'a-Z0-9':
                if(!(/^[a-zA-Z0-9]+$/.test(FieldValue))) VF_Failed(Field, Display);
                break;
                
            case 'A-Z0-9':
                if(!(/^[A-Z0-9]+$/.test(FieldValue))) VF_Failed(Field, Display);
                break;
                
            case '[x]~':
                if(/^[\~\`\!\@\#\$\%\^\&\*\(\)\_\+\{\}\[\]\|\\\"\'\:\;\?\/\>\.\<\,\]ㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄗㄘㄙㄧㄨㄩㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦ～！＠＃＄％＾＆＊（）＿＋｀１２３４５６７８９０×——－\-\−＝×÷｜、，。、　《〈＜⋯⋯・·．》〉＞／？““〃﹋：；ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ]+$/.test(FieldValue)) VF_Failed(Field, Display);
                break;
                
            case '[x]~0-9':
                if(/^[\~\`\!\@\#\$\%\^\&\*\(\)\_\+\{\}\[\]\|\\\"\'\:\;\?\/\>\.\<\,\]ㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄗㄘㄙㄧㄨㄩㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦ～！＠＃＄％＾＆＊（）＿＋｀１２３４５６７８９０1234567890×——－\-\−＝×÷｜、，。、　《〈＜⋯⋯・·．》〉＞／？““〃﹋：；ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ]+$/.test(FieldValue)) VF_Failed(Field, Display);
                break;
        }
        
        
        switch(Type)
        {
            case 'length':
                if(FieldValue.length < Val || FieldValue.length > Val2) VF_Failed(Field, Display);
                break;
                
            case 'number':
                if(FieldValue < Val || FieldValue > Val2) VF_Failed(Field, Display);
                break;
                
            case 'date':
                switch(Val)
                {
                    case 'YYYY-MM-DD':
                        if(!(/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/.test(FieldValue))) VF_Failed(Field, Display);
                        break;
                    case 'MM-DD-YYYY':
                        if(!(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$/.test(FieldValue))) VF_Failed(Field, Display);
                        break;
                    case 'DD-MM-YYYY':
                        if(!(/^(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|1[0-2])-[0-9]{4}$/.test(FieldValue))) VF_Failed(Field, Display);
                        break;
                }
                break;
                
            case 'email':
                if(!(/^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z]+$/.test(FieldValue))) VF_Failed(Field, Display);
        }
    }
    
    return ValidateFormPass;
}
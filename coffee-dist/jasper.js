// Generated by CoffeeScript 1.10.0

/*
   ,,
   db       db
           ;MM:
 `7MM     ,V^MM.    ,pP"Ybd `7MMpdMAo.  .gP"Ya `7Mb,od8
   MM    ,M  `MM    8I   `"   MM   `Wb ,M'   Yb  MM' "'
   MM    AbmmmqMA   `YMMMa.   MM    M8 8M""""""  MM
   MM   A'     VML  L.   I8   MM   ,AP YM.    ,  MM
   MM .AMA.   .AMMA.M9mmmP'   MMbmmd'   `Mbmmd'.JMML.
QO MP                         MM
`bmP                        .JMML.
                   contributors
          ZeptoJS   : http://goo.gl/yFtHui
          Slide     : http://goo.gl/VjYiOU
          Serialize : http://goo.gl/UTqTzI
          AvgColor  : http://goo.gl/eGcxJ5
          Library   : http://goo.gl/ECZAWR
          isNumeric : http://goo.gl/0qmDLc
 */

(function() {
  var Jasper;

  Jasper = (function() {
    var container, filter, isArray, isObject, jA, jasper, queue, slice;
    jasper = {};
    queue = [];
    container = [];
    slice = container.slice;
    filter = container.filter;
    isArray = Array.isArray || function(obj) {
      return obj instanceof Array;
    };
    isObject = function(obj) {
      return obj instanceof Object;
    };

    /*
    Init
    
    Detect the type of the selector, and do the right choose.
     */
    jasper.init = function(selector, context) {
      var dom;
      if (typeof selector === 'string') {
        if (selector[0] === '<') {
          return jasper.fragment(selector);
        }
        selector = selector.trim();
        if (context != null) {
          return jA(selector).find(context);
        }
        dom = jasper.select(document, selector);
      } else if (jasper.isJasper(selector)) {
        return selector;
      } else {
        if (isArray(selector)) {
          dom = filter.call(selector, function(item) {
            return item !== null;
          });
        } else if (isObject(selector)) {
          dom = [selector];
          selector = null;
        }
      }
      return jasper.Jasper(dom, selector);
    };

    /*
    Is Jasper
    
    Returns true when the object is a jAsper object.
     */
    jasper.isJasper = function(obj) {
      return obj instanceof jasper.Jasper;
    };

    /*
    Select
    
    Select the dom elements by the selector.
     */
    jasper.select = function(main, selector) {
      var error, error1;
      try {
        return slice.call(main.querySelectorAll(selector));
      } catch (error1) {
        error = error1;
        return console.log('[jAsper ERR] Cannot select the elements with the selector:' + selector);
      }
    };

    /*
    Fragment
    
    Build up the fragments, make the <tag> become a real element.
     */
    jasper.fragment = function(selector) {
      var $element, attrObj, attrs, content, contentMatch, contentRegEx, hasAttr, hasContent, i, j, len, mainAll, mainAttrs, mainElement, match, noContent, ref, regEx;
      noContent = /^<([^\/].*?)>$/;
      regEx = /(?:<)(.*?)( .*?)?(?:>)/;
      match = regEx.exec(selector);
      mainAll = match[0];
      mainElement = match[1];
      mainAttrs = match[2];
      hasAttr = typeof mainAttrs !== 'undefined';
      hasContent = !mainAll.match(noContent);
      if (hasContent) {
        contentRegEx = new RegExp(mainAll + '(.*?)(?:<\/' + mainElement + '>)$');
        contentMatch = contentRegEx.exec(selector);
        content = contentMatch[1];
      }
      if (hasAttr) {
        attrs = mainAttrs.split(/(?:\s)?(.*?)=(?:"|')(.*?)(?:"|')/).filter(Boolean);
        attrObj = {};
        ref = attrs.length;
        for (j = 0, len = ref.length; j < len; j++) {
          i = ref[j];
          if ((i + 2) % 2 === 0) {
            attrObj[attrs[i]] = attrs[i + 1];
          }
        }
      }
      $element = jA(document.createElement(mainElement));
      if (hasAttr) {
        $element.attr(attrObj);
      }
      if (hasContent) {
        $element.html(content);
      }
      return $element;
    };

    /*
    Jasper
     */
    jasper.Jasper = function(dom, selector) {
      dom = dom || [];
      dom.__proto__ = jA.fn;
      dom.selector = selector || '';
      return dom;
    };

    /*
    jA
    
    The main function.
     */
    jA = function(selector, context) {
      if (typeof selector === 'function') {
        return document.addEventListener('DOMContentLoaded', selector);
      } else {
        return jasper.init(selector, context);
      }
    };

    /*
    Library
    
    The core functions.
     */
    jA.fn = {

      /*
      Each
       */
      each: function(callback) {
        container.every.call(this, function(index, element) {
          return callback.call(index, element, index) !== false;
        });
        return this;
      },

      /*
      Slice
       */
      slice: function() {
        return jA(slice.apply(this, arguments));
      },

      /*
      Eq
       */
      eq: function(index) {
        return this.slice(index, index + 1);
      }
    };
    if (!window.jA) {
      return window.jA = jA;
    }
  })();

  jA(function() {
    return console.log(jA('div'));
  });

}).call(this);

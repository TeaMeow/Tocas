/*
   ,,
   db       db
           ;MM:
 `7MM     ,V^MM.    ,pP"Ybd `7MMpdMAo.  .gP"Ya `7Mb,od8
   MM    ,M  `MM    8I   `"   MM   `Wb ,M'   Yb  MM' "'
   MM    AbmmmqMA   `YMMMa.   MM    M8 8M""""""  MM
   MM   A'     VML  L.   I8   MM   ,AP YM.    ,  MM
   MM .AMA.   .AMMA.M9mmmP'   MMbmmd'   `Mbmmd'.JMML.
QO MP                         MM
`bmP                        .JMML.

                   contributors

          ZeptoJS   : http://goo.gl/yFtHui
          Slide     : http://goo.gl/VjYiOU
          Serialize : http://goo.gl/UTqTzI
          AvgColor  : http://goo.gl/eGcxJ5
          Library   : http://goo.gl/ECZAWR
          isNumeric : http://goo.gl/0qmDLc
*/


/**
 * Jasper Main Library
 *
 * The main jasper code.
 */

var Jasper = (function ()
{
    var jA,
        emptyArray          = [],
        slice               = emptyArray.slice,
        filter              = emptyArray.filter,
        queue               = [],
        jasper              = {},
        isArray             = Array.isArray || function(obj){ return obj instanceof Array  },
        isObject            = function(obj){ return obj instanceof Object },
        isEmptyOrWhiteSpace = function(str){ return str === null || str.match(/^\s*$/) !== null },
        dropzoneNumber      = 0

    /** Filter those thing which is we don't need it */
    function compact(array)
    {
        return filter.call(array, function(item){ return item != null })
    }

    jasper.init = function(selector, context)
    {
        var dom

        /** If Selector is a normal string */
        if(typeof selector == 'string')
        {
            if(selector[0] == '<')
                return jasper.fragment(selector)

            /** Remove the space */
            selector = selector.trim()

            if(typeof context != 'undefined')
                return jA(selector).find(context)

            dom = jasper.select(document, selector)
        }
        else if(jasper.isJasper(selector))
        {
            return selector
        }
        else
        {
            /** Filter for eq function */
            if(isArray(selector))
                dom = compact(selector)
            /** If Selector is object, which means it may generated by Jasper */
            else if(isObject(selector))
                dom = [selector], selector = null
        }

        return jasper.Jasper(dom, selector)
    }

    jasper.fragment = function(selector)
    {
        var noContent    = /^<([^\/].*?)>$/,
            regEx        = /(?:<)(.*?)( .*?)?(?:>)/,
            match        = regEx.exec(selector),
            // <div class="foo" bar="BARRRR">
            mainAll      = match[0],
            // div
            mainElement  = match[1],
            // class="foo" bar="BARRRR"
            mainAttrs    = match[2],
            hasAttr      = typeof mainAttrs !== 'undefined',
            hasContent   = !mainAll.match(noContent)



        /** Is this tag IS a container tag? (ex: div, section) */
        if(hasContent)
        {
            /** Catch the content of it */
            var contentRegEx = new RegExp(mainAll + '(.*?)(?:<\/' + mainElement + '>)$'),
                contentMatch = contentRegEx.exec(selector),
                content      = contentMatch[1]
        }


        /** Split Attrs into an array like this [KEY, VALUE, KEY, VALUE] */
        if(hasAttr)
        {
            var attrs   = mainAttrs.split(/(?:\s)?(.*?)=(?:"|')(.*?)(?:"|')/).filter(Boolean),
                attrObj = {}

            /** Get odd and even values, convert [KEY, VALUE, KEY, VALUE] to {KEY: VALUE, KEY: VALUE} */
            for(var i = 0; i < attrs.length; i++)
                if( (i + 2) % 2 == 0)
                     attrObj[attrs[i]] = attrs[i + 1]
        }

        var $element = jA(document.createElement(mainElement))

        if(hasAttr)
            $element.attr(attrObj)

        if(hasContent)
            $element.html(content)

        return $element
    }



    jasper.isJasper = function(obj)
    {
        return obj instanceof jasper.Jasper
    }

    jasper.select = function(element, selector)
    {
        try
        {
            return slice.call(element.querySelectorAll(selector))
        }
        catch(e)
        {
            console.log('TOCAS ERROR: Something wrong while selecting ' + selector + ' element.')
        }
    }

    jasper.Jasper = function(dom, selector)
    {
        dom           = dom || []
        dom.__proto__ = jA.fn
        dom.selector  = selector || ''

        return dom
    }




    /**
     * jA
     *
     * Call to Init to get everything ready.
     */

    jA = function(selector, context)
    {
        if(typeof selector == 'function')
            document.addEventListener('DOMContentLoaded', selector)
        else
            return jasper.init(selector, context)
    }




    /**
     * Library
     */

    jA.fn =
    {
        /**
         * Each
         */

        each: function(callback)
        {
            emptyArray.every.call(this, function(index, element)
            {
                return callback.call(index, element, index) !== false
            })

            return this
        },




        /**
         * Slice
         */

        slice: function()
        {
            /** Regenerate a new object */
            return jA(slice.apply(this, arguments))
        },




        /**
         * Eq
         *
         * Jump to target element.
         */

        eq: function(index)
        {
            return this.slice(index, index + 1)
        }


}

    if(!window.jA) window.jA = jA

})(Jasper)


/**
 * Secondary Selector
 *
 * For sometimes we want to use the javascript's own object not our own functions.
 */

function $_(Selector)
{
    var Obj = document.querySelectorAll(Selector)
    return (Obj.length == 0) ? false : (Obj.length == 1) ? Obj[0] : Obj
}


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js from "merge.txt" begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/* Last merge : Sat Feb 18 20:02:05 CST 2017  */

/* Merging order :

- src/jasper.js
- src/core/deferred.js
- src/core/helper.js
- src/element/attr.js
- src/element/content.js
- src/element/cookie.js
- src/element/css.js
- src/element/validate.js
- src/element/dom.js
- src/element/visibility.js
- src/form/serialize.js
- src/form/form-explode.js
- src/form/form-validate.js
- src/event/binder.js
- src/event/common.js
- src/event/handler.js
- src/extend/avg-color.js
- src/extend/draw.js
- src/extend/gen-date.js
- src/extend/geo.js
- src/extend/url-param.js
- src/form/serialize.js
- src/protocol/ajax.js
- src/protocol/pjax.js
- src/protocol/sse.js
- src/protocol/rest.js

*/


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/jasper.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/*
   ,,
   db       db
           ;MM:
 `7MM     ,V^MM.    ,pP"Ybd `7MMpdMAo.  .gP"Ya `7Mb,od8
   MM    ,M  `MM    8I   `"   MM   `Wb ,M'   Yb  MM' "'
   MM    AbmmmqMA   `YMMMa.   MM    M8 8M""""""  MM
   MM   A'     VML  L.   I8   MM   ,AP YM.    ,  MM
   MM .AMA.   .AMMA.M9mmmP'   MMbmmd'   `Mbmmd'.JMML.
QO MP                         MM
`bmP                        .JMML.

                   contributors

          ZeptoJS   : http://goo.gl/yFtHui
          Slide     : http://goo.gl/VjYiOU
          Serialize : http://goo.gl/UTqTzI
          AvgColor  : http://goo.gl/eGcxJ5
          Library   : http://goo.gl/ECZAWR
          isNumeric : http://goo.gl/0qmDLc
*/


/**
 * Jasper Main Library
 *
 * The main jasper code.
 */

var Jasper = (function ()
{
    var jA,
        emptyArray          = [],
        slice               = emptyArray.slice,
        filter              = emptyArray.filter,
        queue               = [],
        jasper              = {},
        isArray             = Array.isArray || function(obj){ return obj instanceof Array  },
        isObject            = function(obj){ return obj instanceof Object },
        isEmptyOrWhiteSpace = function(str){ return str === null || str.match(/^\s*$/) !== null },
        dropzoneNumber      = 0

    /** Filter those thing which is we don't need it */
    function compact(array)
    {
        return filter.call(array, function(item){ return item != null })
    }

    jasper.init = function(selector, context)
    {
        var dom

        /** If Selector is a normal string */
        if(typeof selector == 'string')
        {
            if(selector[0] == '<')
                return jasper.fragment(selector)

            /** Remove the space */
            selector = selector.trim()

            if(typeof context != 'undefined')
                return jA(selector).find(context)

            dom = jasper.select(document, selector)
        }
        else if(jasper.isJasper(selector))
        {
            return selector
        }
        else
        {
            /** Filter for eq function */
            if(isArray(selector))
                dom = compact(selector)
            /** If Selector is object, which means it may generated by Jasper */
            else if(isObject(selector))
                dom = [selector], selector = null
        }

        return jasper.Jasper(dom, selector)
    }

    jasper.fragment = function(selector)
    {
        var noContent    = /^<([^\/].*?)>$/,
            regEx        = /(?:<)(.*?)( .*?)?(?:>)/,
            match        = regEx.exec(selector),
            // <div class="foo" bar="BARRRR">
            mainAll      = match[0],
            // div
            mainElement  = match[1],
            // class="foo" bar="BARRRR"
            mainAttrs    = match[2],
            hasAttr      = typeof mainAttrs !== 'undefined',
            hasContent   = !mainAll.match(noContent)



        /** Is this tag IS a container tag? (ex: div, section) */
        if(hasContent)
        {
            /** Catch the content of it */
            var contentRegEx = new RegExp(mainAll + '(.*?)(?:<\/' + mainElement + '>)$'),
                contentMatch = contentRegEx.exec(selector),
                content      = contentMatch[1]
        }


        /** Split Attrs into an array like this [KEY, VALUE, KEY, VALUE] */
        if(hasAttr)
        {
            var attrs   = mainAttrs.split(/(?:\s)?(.*?)=(?:"|')(.*?)(?:"|')/).filter(Boolean),
                attrObj = {}

            /** Get odd and even values, convert [KEY, VALUE, KEY, VALUE] to {KEY: VALUE, KEY: VALUE} */
            for(var i = 0; i < attrs.length; i++)
                if( (i + 2) % 2 == 0)
                     attrObj[attrs[i]] = attrs[i + 1]
        }

        var $element = jA(document.createElement(mainElement))

        if(hasAttr)
            $element.attr(attrObj)

        if(hasContent)
            $element.html(content)

        return $element
    }



    jasper.isJasper = function(obj)
    {
        return obj instanceof jasper.Jasper
    }

    jasper.select = function(element, selector)
    {
        try
        {
            return slice.call(element.querySelectorAll(selector))
        }
        catch(e)
        {
            console.log('TOCAS ERROR: Something wrong while selecting ' + selector + ' element.')
        }
    }

    jasper.Jasper = function(dom, selector)
    {
        dom           = dom || []
        dom.__proto__ = jA.fn
        dom.selector  = selector || ''

        return dom
    }




    /**
     * jA
     *
     * Call to Init to get everything ready.
     */

    jA = function(selector, context)
    {
        if(typeof selector == 'function')
            document.addEventListener('DOMContentLoaded', selector)
        else
            return jasper.init(selector, context)
    }




    /**
     * Library
     */

    jA.fn =
    {
        /**
         * Each
         */

        each: function(callback)
        {
            emptyArray.every.call(this, function(index, element)
            {
                return callback.call(index, element, index) !== false
            })

            return this
        },




        /**
         * Slice
         */

        slice: function()
        {
            /** Regenerate a new object */
            return jA(slice.apply(this, arguments))
        },




        /**
         * Eq
         *
         * Jump to target element.
         */

        eq: function(index)
        {
            return this.slice(index, index + 1)
        }


}

    if(!window.jA) window.jA = jA

})(Jasper)


/**
 * Secondary Selector
 *
 * For sometimes we want to use the javascript's own object not our own functions.
 */

function $_(Selector)
{
    var Obj = document.querySelectorAll(Selector)
    return (Obj.length == 0) ? false : (Obj.length == 1) ? Obj[0] : Obj
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/core/deferred.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * deffered
 *
 * 類似 Promise 的功能。
 *
 * 來源 http://stackoverflow.com/questions/18096715/implement-deferred-object-without-using-jquery
 */

jA.deferred = function()
{
    this._always = []
    this._done   = []
    this._fail   = []
}

jA.deferred.prototype =
{
    execute: function(list, args)
    {
        var i = list.length

        args = Array.prototype.slice.call(args)

         while(i--) list[i].apply(null, args)
    },

    anyway: function()
    {
        this.execute(this._always, arguments)
        return this
    },

    resolve: function()
    {
        this.execute(this._done, arguments)
        return this
    },

    reject: function()
    {
        this.execute(this._fail, arguments)
        return this
    },

    then: function()
    {
        return this
    },

    done: function(callback)
    {
        this._done.push(callback)
        return this
    },

    fail: function(callback)
    {
        this._fail.push(callback)
        return this
    },

    always: function(callback)
    {
        this._always.push(callback)
        return this
    }
}



/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/core/helper.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * isJSON
 *
 * 確認字串是否為 JSON 格式。
 *
 * 來源 http://stackoverflow.com/questions/18096715/implement-deferred-object-without-using-jquery
 */

jA.isJSON = function(string)
{
    string = typeof string !== "string" ? JSON.stringify(string)
                                        : string
    try
    {
        string = JSON.parse(string)
    }
    catch (e)
    {
        return false
    }

    if (typeof string === "object" && string !== null)
        return true

    return false
}

/**
 * inArray
 *
 * 項目是否在陣列中。
 */

jA.inArray = function(item, targetArray)
{
    return targetArray.indexOf(item)
}

/**
 * isNumeric
 *
 * 是否為數字型態。
 */

jA.isNumeric = function(number)
{
    return !isNaN(parseFloat(Number)) && isFinite(Number)
}

/**
 * escapeHTML
 *
 * 脫逸字串中的 HTML 標籤。
 */

jA.escapeHTML = function(string)
{
    if(typeof string === 'string')
        return string.replace(/&/g, "&amp;")
                     .replace(/</g, "&lt;")
                     .replace(/>/g, "&gt;")
                     .replace(/"/g, "&quot;")
                     .replace(/'/g, "&#039;")
    else
        return null
}

/**
 * unescapeHTML
 *
 * 將字串中脫逸的 HTML 標籤反轉回 HTML 標籤。
 */

jA.unescapeHTML = function(string)
{
    if(typeof string === 'string')
        return string.replace(/&amp;/g, '&')
                     .replace(/&lt;/g, '<')
                     .replace(/&gt;/g, '>')
                     .replace(/&quot;/g, '"')
                     .replace(/&#039;/g, "'")
    else
        return null
}

/**
 * nl2br
 *
 * 將換行符號轉換成 <br> 標籤。
 */

jA.nl2br = function(string)
{
    if(typeof string === 'string')
        return string.replace(/\n/g, "<br>")
    else
        return null

}

/**
 * br2nl
 *
 * 將 <br> 標籤轉換成換行符號。
 */

jA.br2nl = function(string)
{
    if(typeof string === 'string')
        return string.replace(/<br>/g, "\r")
    else
        return null

}

/**
 * map
 *
 * 和 ES 的 map 用法相同。
 */

jA.map = function(array, callback)
{
    if(Object.prototype.toString.call(array) === '[object Array]')
        return array.map(callback)

    return []
}

/**
 * rand
 *
 * 在指定的範圍內產生亂數。
 */

jA.rand = function(min, max)
{
    return Math.floor(Math.random() * (max - min + 1) + min)
}

/**
 * guid
 *
 * 產生 GUID 編號。
 */

var jAsperGuids = []

jA.guid = function()
{
    var guid

    function s4()
    {
        return Math.floor((1 + Math.random()) * 0x10000)
                   .toString(16)
                   .substring(1)
    }

    do
    {
        guid = s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4()
    }
    while(jAsperGuids.indexOf(guid) != -1)

    jAsperGuids.push(guid)

    return guid
}

/**
 * digits
 *
 * 將數字加上百進位符號。
 */

jA.digits = function(number)
{
    return number.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "jA1,")
}

/**
 * isset
 *
 * 確認是否有此變數，類似 PHP 的 isset()
 *
 * 來源 http://phpjs.org/functions/isset
 */

jA.isset = function()
{
    var a = arguments,
        l = a.length,
        i = 0,
        undef

    if (l === 0) {
        throw new Error('Empty isset')
    }

    while (i !== l) {
        if (a[i] === undef || a[i] === null) {
            return false
        }
        i++
    }
    return true
}

/**
 * setTimeout
 *
 * 與 ES 的 setTimeout 相同。
 */

jA.setTimeout = function(timer)
{
    var d = new jA.deferred()
    var that = this

    setTimeout(function(r)
    {
        d.resolve(r)
    }, timer)

    return d
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/element/attr.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * attr
 *
 * 新增標籤（Attribute）到指定元素上。
 */

jA.fn.attr = function(attr, value)
{
    value = (value === null) ? null : value

    /** Set multiple Attr if Attr is object */
    if(typeof attr === 'object' && !value)
        return this.each(function(){ for(var i in attr) this.setAttribute(i, attr[i]) })

    /** Set single attr */
    else if(attr != null && value != null)
        return this.each(function(){ this.setAttribute(attr, value) })

    /** Get single attr only if Attr is not null */
    else if(attr != null && !value)
        return 0 in this ? this[0].getAttribute(attr) : null
}

/**
 * removeAttr
 *
 * 移除指定元素的特定標籤（Attribute）。
 */

jA.fn.removeAttr = function(attr)
{
    return this.each(function(){ this.removeAttribute(attr) })
}



/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/element/content.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * val
 *
 * 設置一個元素的值，如果傳入的值是空的則為取得該元素的值。
 */

jA.fn.val = function(value)
{
    if(value == null)
    {
        if(0 in this)
            if(this[0].nodeName == 'SELECT')
                return this[0].options[this[0].selectedIndex].value
            else
                return this[0].value
        else
            return null
    }
    else
    {
        return this.each(function(){ this.value = value })
    }
}

/**
 * empty
 *
 * 清空一個元素的 HTML 或是值。
 */

jA.fn.empty = function()
{
    return this.each(function()
    {
        if(this.innerHTML != 'undefined') this.innerHTML = ''
        if(this.value     != 'undefined') this.value     = ''
    })
}

/**
 * text
 *
 * 替一個元素設定裡面的文字，如果沒有文字傳入，則是取得該元素的文字。
 */

jA.fn.text = function(text)
{
    if(text === undefined)
        return 0 in this ? this[0].innerText : null
    else
        return this.each(function(){ this.textContent = text })
}

/**
 * html
 *
 * 替一個元素設定裡面的 HTML，如果沒有 HTML 傳入，則是取得該元素的 HTML。
 */

jA.fn.html = function(html)
{
    html = html || null

    if(!html)
        return 0 in this ? this[0].innerHTML : null
    else
        return this.each(function(){ this.innerHTML = html })
}

/**
 * fdPush
 *
 * 將物件的內容全部推送進 FormData 中。
 */

jA.fn.fdPush = function(obj)
{
    for(var i in obj)
        this[0].append(i, obj[i])

    return this[0]
}

/**
 * map
 *
 * 和 ES 的陣列 map 用法相同。
 */

jA.fn.map = function(callback)
{
    var array = []

    this.each(function()
    {
        var result = callback.call(this)

        if(result)
            array.push(result)
    })

    return array
}



/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/element/cookie.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * cookie
 *
 * 設置、編輯、移除 Cookie。當傳入的值是空白的時候會取得該 Cookie，
 * 如果傳入的選項是 `-1` 那麼則是移除該 Cookie。選項接受 `expires`、`domain` 和 `path`。
 */

jA.cookie = function(name, value, options)
{
    /** If value is not null, means this is SET a cookie, not GET a cookie */
    if(value != null)
    {
        var expire = (options instanceof Object && typeof options.expires != 'undefined') ? options.expires : 365,
            domain = (options instanceof Object && typeof options.domain  != 'undefined') ? ' domain=' + options.domain + ';' : '',
            path   = ' path=' + (options instanceof Object && typeof options.path != 'undefined' ? options.path : '/') + ';'

        var d = new Date()

        /** If Options is not object but -1, means user want to delete this cookie, so we given a expired time */
        if(!options instanceof Object && options === -1)
            d.setTime(d.getTime() - (24 * 60 * 60 * 1000))
        else
            d.setTime(d.getTime() + (expire * 24 * 60 * 60 * 1000))

        /** Convert the time to cookie format */
        var expires = 'expires=' + d.toUTCString() + ';'

        /** Set the cookie */
        document.cookie = name + '=' + (value || '') + '; ' + expires + domain + path
    }
    else
    {
        var cookieName = name + '=',
            list       = document.cookie.split(';')

        for(var i in list)
        {
            var cookie = list[i]

            /** If first word is blank, then get content without blank */
            while(cookie.charAt(0)==' ')
                cookie = cookie.substring(1)

            /** Get the value of cookie*/
            if(cookie.indexOf(cookieName) != -1)
                return cookie.substring(cookieName.length, cookie.length)
        }
    }

    return 'undefined'
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/element/css.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * cssAnimate
 *
 * 進行 CSS 動畫，很適合用在 Animate.css。
 */

jA.fn.cssAnimate = function(animate, callback, time)
{
    /** If someone using callback field as time.. */
    if(typeof callback == 'number' && typeof time != 'function')
        time = callback

    if(typeof callback == 'number' && typeof time == 'function')
    {
        var trueCallback = time,
            trueTime     = callback

        callback = trueCallback,
        time     = trueTime
    }

    /** Turn millionsecond to float (ex: 300 -> 0.3), then turn float to string and remove the dot (0.3 -> 03 -> 3)*/
    var timer = parseInt((time / 1000).toString().replace('.', ''), 10)
        timer = time < 1000 ? '0' + timer : timer

    /** Select animation duration by Time */
    time = isNaN(time) ? '' : ' animated' + timer + 's'

    return this.each(function()
    {
        /** For passing jA(this) to inside function */
        var that = this

        /** Add animation */
        jA(this).addClass(animate + ' animated' + time)
               /** Once the animation end, we remove the animate class and callback **/
               .one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function()
                {
                   jA(that).removeClass(animate + ' animated' + time)

                   if((typeof callback !== 'undefined' && callback != null) && typeof callback !== 'number')
                        callback.call(that)
                })
    })
}

/**
 * css
 *
 * 替元素設置或移除單個、多個 CSS 屬性。
 */

jA.fn.css = function(property, value)
{
    var css = ''

    /** Set single CSS : If CSS and content is not empty, then set the CSS */
    if(property != null && value != null)
    {
        css = property + ':' + value + ';'
    }
    /** Set multi CSS : If CSS is a Object */
    else if(typeof property === 'object' && !Array.isArray(property) && value == null)
    {
        for(var i in property)
            if(property.hasOwnProperty(i))
                css += i + ':' + property[i] + ';'
    }
    /** Get multi CSS : If style name is a array and have only key */
    else if(Array.isArray(property) && value == null)
    {
        var cssObject = {}

        this.each(function(){ for(var i in property) cssObject[property[i]] = jA(this).getCss(property[i]) })

        return cssObject
    }
    /** Get single CSS : If only style name */
    else if(property != null && value == null)
    {
        return jA(this).getCss(property)
    }

    return this.each(function()
    {
        if(typeof this.style == 'undefined')
            return

        this.style.cssText = this.style.cssText + css
    })
}

/**
 * hasClass
 *
 * 檢查元素是否有該類別（Class）名稱。
 */

jA.fn.hasClass = function(classes)
{
    if(0 in this)
        if(this[0].classList)
            return this[0].classList.contains(classes)
        else
            return new RegExp('(^| )' + classes + '( |$)', 'gi').test(this[0].className)
}

/**
 * classList
 *
 * 回傳元素的類別陣列。
 */

jA.fn.classList = function()
{
    var classes = []

    if(0 in this)
        if(this[0].classList)
            for(var i=0; i<this[0].classList.length; i++)
                classes.push(this[0].classList[i])
        else
            for(var i in this[0].className.split(' '))
                classes.push(this[0].className.split(' ')[i])

    return classes
}

/**
 * addClass
 *
 * 替元素加上單個、多個樣式類別。
 */

jA.fn.addClass = function(classes)
{
    if(classes === null)
        return

    return this.each(function()
    {
        var list = classes.split(' ')

        for(var i in list)
        {
            if(list[i] === '')
                continue

            if(this.classList)
                this.classList.add(list[i])
            else
                this.className += ' ' + list[i]
        }
    })
}

/**
 * removeClass
 *
 * 替元素移除單個、多個樣式類別。
 */

jA.fn.removeClass = function(classes)
{
    return this.each(function()
    {
        if(!classes)
        {
            this.className = ''
        }
        else
        {
            var list = classes.split(' ')

            for(var i in list)
            {
                if(list[i] == '')
                    continue

                /** If there's classList, the just remove it from classList, otherwise we replace the string which is in the (class="")*/
                if(this.classList)
                    this.classList.remove(list[i])
                else if(typeof this.className !== 'undefined')
                    this.className = this.className.replace(new RegExp('(^|\\b)' + classes.split(' ').join('|') + '(\\b|$)', 'gi'), ' ')
            }
        }
    })
}

/**
 * toggleClass
 *
 * 替元素切換單個、多個樣式類別。
 */

jA.fn.toggleClass = function(classes)
{
    return this.each(function()
    {
        var list, index, objClassList

        list = classes.split(' ')

        for(var i in list)
        {
            if(this.classList)
            {
                this.classList.toggle(list[i])
            }
            else
            {
                /** Split the class */
                objClassList = this.className.split(' ')
                /** Is the class in class list already? */
                index = list.indexOf(list[i])

                /** If already existed, we remove it, otherwise we add it */
                if(index >= 0)
                    objClassList.splice(index, 1)
                else
                    objClassList.push(list[i])

                this.className = list[i].join(' ')
            }
        }
    })
}

/**
 * getCss
 *
 * 取得元素的已計算樣式。
 */

jA.fn.getCss = function(property)
{
    /** Get computed style */
    try
    {
        return 0 in this ? document.defaultView.getComputedStyle(this[0], null).getPropertyValue(property) : null
    }
    catch(err)
    {
        return null
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/element/validate.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * validate
 *
 * 以 HTML5 驗證該元素。
 */

jA.fn.validate = function()
{
    var jAthis    = jA(this),
        minlength = jAthis.attr('minlength'),
        maxlength = jAthis.attr('maxlength'),
        min       = jAthis.attr('min'),
        max       = jAthis.attr('max'),
        required  = jAthis.attr('required') != null,
        pattern   = jAthis.attr('pattern'),
        type      = jAthis.attr('type'),
        value     = jAthis.val()

    if(required && value == '')
        return 'required'

    if(minlength !== null && value.length < minlength)
        return 'minlegnth'

    if(maxlength !== null && value.length > maxlength)
        return 'maxlegnth'

    if(min !== null && parseInt(value) < min)
        return 'min'

    if(max !== null && parseInt(value) > max)
        return 'max'

    if(pattern !== null)
    {
        var regEx = new RegExp(pattern.replace(/\//g, ''))

        if(!regEx.test(value))
            return 'pattern'
    }

    if(type !== null && type == 'email' && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value))
        return 'email'

    return true
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/element/dom.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * wrap
 *
 * 將目前元素用一個指定元素包起來。
 */

jA.fn.wrap = function(element)
{
    return this.each(function()
    {
        this.parentNode.insertBefore(element, this)
        element.appendChild(this)
    })
}

/**
 * append
 *
 * 在目前元素後面新增一個元素。
 */

jA.fn.append = function(html)
{
    if(html != null && typeof html == 'object')
        return this.each(function(){ this.appendChild(html) })
    else if(html != null)
        return this.each(function(){ this.innerHTML += html })
}

/**
 * after
 *
 * 在目前元素後面以 HTML 新增一個元素。
 */

jA.fn.after = function(html)
{
    if(html != null)
        return this.each(function(){ this.insertAdjacentHTML('afterend', html) })
}

/**
 * before
 *
 * 在目前元素前面以 HTML 新增一個元素。
 */

jA.fn.before = function(html)
{
    if(html != null)
        return this.each(function(){ this.insertAdjacentHTML('beforeBegin', html) })
}

/**
 * prepend
 *
 * 在目前元素前面以 HTML 新增一個元素。
 */

jA.fn.prepend = function(html)
{
    if(html != null)
    {
        return this.each(function()
        {
            var template = document.createElement('template')
            template.innerHTML = html

            if(typeof this.nodeType !== 'undefined')
                if(this.firstChild)
                    return this.insertBefore(template.content, this.firstChild)
                else
                    return this.appendChild(template.content)
        })
    }
}

/**
 * appendTo
 *
 * 將目前的元素移動到指定元素的後面。
 */

jA.fn.appendTo = function(selector)
{
    return this.each(function()
    {
        var that = this

        jA(selector).each(function()
        {
            this.appendChild(that, this.nextSibling)
        })
    })
}

/**
 * prependTo
 *
 * 將目前的元素移動到指定元素的前面。
 */

jA.fn.prependTo = function(selector)
{
    return this.each(function()
    {
        var that = this

        jA(selector).each(function()
        {
            if(this.firstChild)
                return this.insertBefore(that, this.firstChild)
            else
                return this.appendChild(that)
        })
    })
}

/**
 * insertAfter
 *
 * 將目前的元素插入到指定元素的後面。
 */

jA.fn.insertAfter = function(selector)
{
    return this.each(function()
    {
        var that = this

        jA(selector).each(function()
        {
            this.parentNode.insertBefore(that, this.nextSibling)
        })
    })
}

/**
 * insertBefore
 *
 * 將目前的元素插入到指定元素的前面。
 */

jA.fn.insertBefore = function(selector)
{
    return this.each(function()
    {
        var that = this

        jA(selector).each(function()
        {
            this.insertAdjacentHTML('beforeBegin', that)
        })
    })
}

/**
 * template
 *
 * 取得 <template> 的內容。
 */

jA.fn.template = function()
{
    return jA(this.clone()[0].content).children()
}

/**
 * clone
 *
 * 複製元素。
 */

jA.fn.clone = function(deep)
{
    /** Copy child too? */
    deep = (typeof deep == 'undefined') ? true : deep

    var cloneList = []

    /** Clone the elements */
    this.each(function()
    {
        cloneList.push(this.cloneNode(deep))
    })

    /** Using the elements which we cloned */
    return jA(cloneList)
}

/**
 * remove
 *
 * 移除元素。
 */

jA.fn.remove = function()
{
    return this.each(function(){ this.parentNode.removeChild(this) })
}

/**
 * children
 *
 * 取得元素的子節點。
 */

jA.fn.children = function()
{
    var list = []

    this.each(function(i, el)
    {
        /** Push the child nodes to the list*/
        list.push.apply(list, el.children)
    })

    /** Return the list with $ */
    return jA(list)
}

/**
 * find
 *
 * 在目前的元素中搜尋指定節點。
 */

jA.fn.find = function(selector)
{
    /** The selector must be string */
    if(typeof selector !== 'string')
        return null

    var list = []

    this.each(function(i, el)
    {
        /** Push the child nodes to the list*/
        list.push.apply(list, el.querySelectorAll(selector))
    })

    /** Return the list with $ */
    return list.length ? jA(list) : null
}

/**
 * parent
 *
 * 取得目前元素的父節點。
 */

jA.fn.parent = function()
{
    return 0 in this ? jA(this[0].parentNode) : null
}

/**
 * parents
 *
 * 取得目前元素的所有父節點。
 */

jA.fn.parents = function(selector)
{
    var that     = this,
        selector = selector || null,
        parents  = []

    if(selector !== null)
        var selector = jA(selector)

    /** Non stop loop, until there's no parent of the element */
    while(that)
    {
        /** Not this one, we go upper */
        that = jA(that).parent()[0]

        /** No parent? */
        if(!that)
            break

        /** Push to the parents list if it's in the selector or just push it if we don't set a selector */
        if(selector == null || (selector !== null && Array.prototype.indexOf.call(selector, that) !== -1))
            parents.push(that)
    }

    return jA(parents)
}

/**
 * closest
 *
 * 取得此元素的指定父節點。
 */

jA.fn.closest = function(selector)
{
    var that     = this,
        selector = jA(selector)

    /** Non stop loop, until there's no parent of the element */
    while(true)
    {
        /** Not this one, we go upper */
        that = jA(that).parent()[0]

        /** No parent? */
        if(!that)
            return null

        /** Is the parent in the closest selector? If it do, then the parent is the closest element which we want */
        if(Array.prototype.indexOf.call(selector, that) !== -1)
            return jA(that)
    }
}

/**
 * contains
 *
 * 此元素是否含有我們指定的子節點。
 */

jA.fn.contains = function(wants)
{
    var selector = jA(wants),
        isTrue   = false

    this.each(function(i, el)
    {
        var children = el.childNodes

        for(var si = 0; si < selector.length; si++)
        {
            if(Array.prototype.indexOf.call(children, selector[si]) != -1)
                isTrue = true
        }
    })

    return isTrue
}

/**
 * next
 *
 * 取得此元素的下一個元素。
 */

jA.fn.next = function()
{
    if(0 in this)
    {
        var next = this[0].nextElementSibling

        if(next)
            return jA(next)
        else
            return null
    }
    else
    {
        return null
    }
}

/**
 * prev
 *
 * 取得此元素的上一個元素。
 */

jA.fn.prev = function()
{
    if(0 in this)
    {
        var prev = this[0].previousElementSibling

        if(prev)
            return jA(prev)
        else
            return null
    }
    else
    {
        return null
    }
}


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/element/visibility.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * hide
 *
 * 隱藏元素。
 */

jA.fn.hide = function()
{
    return this.each(function()
    {
        jA(this).addClass('hidden')
    })
}

/**
 * show
 *
 * 顯示元素。
 */

jA.fn.show = function()
{
    return this.each(function()
    {
        jA(this).removeClass('hidden')
    })
}

/**
 * isHidden
 *
 * 元素是否正處於隱藏狀態。
 */

jA.fn.isHidden = function()
{
    return jA(this).hasClass('hidden')
}

/**
 * toggle
 *
 * 切換元素的顯示狀態，如果是隱藏的則顯示，反之。
 */

jA.fn.toggle = function()
{
    return this.each(function()
    {
        if(jA(this).hasClass('hidden'))
            jA(this).show()
        else
            jA(this).hide()
    })
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/form/serialize.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * serialize
 *
 * 將表單轉換成參數字串。
 */

jA.fn.serialize = function()
{
    var array = []

    this.each(function()
    {
        var z, a

        for (var z = 0; z < this.elements.length; z++)
        {
            var elements = this.elements[z],
                 name    = elements.name,
                 value   = elements.value

            /** If element's name is empty or disabled or no value, we skip this one */
            if(!name || elements.disabled || !value)
                continue

            switch (elements.nodeName)
            {
                case 'INPUT':
                    switch(elements.type)
                    {
                        case 'text'    :
                        case 'hidden'  :
                        case 'password':
                        case 'button'  :
                        case 'reset'   :
                        case 'submit'  :
                        case 'number'  :
                        case 'email'   :
                            array.push(name + '=' + encodeURIComponent(value))
                            break

                        case 'checkbox':
                        case 'radio'   :
                            /** No checked, we skip. */
                            if(!elements.checked)
                                continue

                            array.push(name + '=' + encodeURIComponent(value))
                            break
                    }
                    break

                case 'TEXTAREA':
                    array.push(name + '=' + encodeURIComponent(value))
                    break

                case 'SELECT':
                    switch(elements.type)
                    {
                        case 'select-one':
                            array.push(name + '=' + encodeURIComponent(value))
                            break

                        case 'select-multiple':
                            for(var a = 0; a < elements.options.length; a++)
                            {
                                var optionValue = elements.options[a].value

                                if (elements.options[a].selected)
                                    array.push(name + '=' + encodeURIComponent(optionValue))
                            }
                    }
                    break

                case 'BUTTON':
                    switch(elements.type)
                    {
                        case 'reset' :
                        case 'submit':
                        case 'button':
                            array.push(name + '=' + encodeURIComponent(value))
                    }
            }
         }
    })

    /** Prevent sending a object or array via XHR cause an error */
    return array.join('&').toString()
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/form/form-explode.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * formExplode
 *
 * 將一個表單的內容轉換成 FormData 格式。
 */

jA.fn.formExplode = function(extraData)
{
    var formData  = {}
    var extraData = extraData || null

    this.find('[name]').each(function()
    {
        if(this.type !== 'file')
            formData[this.name] = this.value == '' ? undefined : this.value
    })

    if(extraData !== null)
        for(var name in extraData)
            formData[name] = extraData[name]

    return formData
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/form/form-validate.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * formValidate
 *
 * 以 HTML5 驗證表單欄位。
 */

jA.fn.formValidate = function(rules, stopAtFirst)
{
    var pass    = true,
        isFirst = true
        rules       = rules       || null,
        stopAtFirst = stopAtFirst || false

    jA(this).find('[name]').each(function()
    {
        var jAthis     = jA(this),
            name       = this.getAttribute('name'),
            validation = jAthis.validate()

        if(!pass && !isFirst && stopAtFirst)
            return false

        if(validation === true)
        {
            if(rules !== null && rules[name] !== undefined && rules[name].valid !== undefined)
                rules[name].valid.call(this)

            return true
        }

        pass = false

        if(rules !== null)
        {
            if(rules[name] !== undefined)
            {
                if(rules[name][validation] !== undefined)
                    rules[name][validation].call(this)

                if(rules[name].invalid !== undefined)
                    rules[name].invalid.call(this, name)

                isFirst = false
            }
        }
    })

    return pass
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/event/binder.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * binder
 *
 * 一次綁定多個事件和元素。
 */

jA.binder = function(binds, rebind)
{
    rebind = rebind || false

    for(var i in binds)
    {
        /** Split the event and the target first */
        var splits  = i.split('|'),
        /** The first array is events */
            events  = splits[0],
        /** Split the targets */
            targets = splits[1].split('&')


        /** Detect what to bind based on different events */
        function bindThis(target, events, bind)
        {
            var event = events.split(' ')


            switch(target)
            {
                case ' window':
                case ' Window':
                    target = window
                    break

                case ' document':
                case ' Document':
                    target = document
                    break
            }


            for(var i in event)
            {
                var e = event[i]

                /** Different ways to bind with different events */
                if(e == 'scrollBottom')
                {
                    if(rebind)
                        jA(target).off('scroll')

                    jA(target).scrollBottom(bind)
                }
                else if(e == 'ready')
                {
                    if(rebind)
                        jA(target).off('DOMContentLoaded')

                    jA(target).ready(bind)
                }
                else if(e != '')
                {
                    if(rebind)
                        jA(target).off(e)

                    jA(target).on(e, bind)
                }
            }
        }


        /** Each target */
        for(var t in targets)
            /** Bind each callback if it's a callback array */
            if(typeof binds[i] !== 'undefined' && binds[i].isArray)
                for(var f in binds[i])
                    bindThis(targets[t], events, binds[i][f])
            /** Or not, lol */
            else
                bindThis(targets[t], events, binds[i])
    }
}


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/event/common.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * mousedown
 *
 * 當滑鼠按下的事件綁定。
 */

jA.fn.mousedown = function(callback)
{
    return jA(this).on('mousedown', callback)
}

/**
 * mouseup
 *
 * 當滑鼠放開的事件綁定。
 */

jA.fn.mouseup = function(callback)
{
    return jA(this).on('mouseup', callback)
}

/**
 * keyup
 *
 * 當按鍵放開的事件綁定。
 */

jA.fn.keyup = function(callback)
{
    return jA(this).on('keyup', callback)
}

/**
 * mousemove
 *
 * 當滑鼠移動的事件綁定。
 */

jA.fn.mousemove = function(callback)
{
    return jA(this).on('mousemove', callback)
}

/**
 * click
 *
 * 按下並放開的事件綁定。
 */

jA.fn.click = function(callback)
{
    return jA(this).on('click', callback)
}

/**
 * dragstart
 *
 * 當拖曳開始的事件綁定。
 */

jA.fn.dragstart = function(callback)
{
    return jA(this).on('dragstart', callback)
}

/**
 * longPress
 *
 * 長按事件綁定。
 */

jA.fn.longPress = function(callback, clickCallback, timer)
{
    /** If callback is not an number, which means it must be a function */
    if(!isNaN(clickCallback))
        timer = clickCallback

    timer = timer || 500

    return this.each(function()
    {
        jA(this).mousedown(function(event)
        {
            var that = this
            /** Haven't trigger long press yet, so we set this to false */
            that.ts_longPressed    = false

            this.ts_longPressTimer = setTimeout(function()
            {
                /** Call long press callback */
                callback.call(that)

                /** Long press has been triggered */
                that.ts_longPressed = true

            }, timer)

            return false
        })
        .mouseup(function(event)
        {
            /** If it's not long press, we call the 'click' callback */
            if(!this.ts_longPressed)
                if(typeof clickCallback !== 'undefined')
                    clickCallback.call(this)

            clearTimeout(this.ts_longPressTimer)
            return false
        })
        .mousemove(function(event)
        {
            clearTimeout(this.ts_longPressTimer)
            return false
        })
    })
}

/**
 * trigger
 *
 * 觸發指定事件。
 */

jA.fn.trigger = function(Event)
{
    return this.each(function(){ this[Event]() })
}

/**
 * scrollBottom
 *
 * 捲軸卷到底的事件綁定。
 */

jA.fn.scrollBottom = function(scroll, reachBottom)
{
    jA(this).on('scroll', function()
    {
        var distance = this.scrollHeight - this.scrollTop - this.clientHeight

        /** Call ReachBottom if user scroll to the bottom */
        if(typeof scroll !== 'undefined' || scroll != null)
            scroll.call(this, distance) //Pass distance from the bottom to the function.

        /** Call ReachBottom if user scroll to the bottom */
        if(distance == 0 && typeof reachBottom !== 'undefined')
            reachBottom.call(this, distance)
    })
}

/**
 * ready
 *
 * 當網頁已經準備的事件綁定。
 */

jA.fn.ready = function(callback)
{
    if(0 in this)
        this[0].addEventListener('DOMContentLoaded', callback)
}

/**
 * focus
 *
 * 聚焦目前元素。
 */

jA.fn.focus = function()
{
    return this.each(function()
    {
        this.focus()
    })
}

/**
 * isBottom
 *
 * 是否已經捲到元素的最底部。
 */

jA.fn.isBottom = function()
{
    if(0 in this)
        if((this[0].scrollHeight - this[0].scrollTop - this[0].clientHeight) == 0)
            return true
    else
        return false
}

/**
 * delayKeyup
 *
 * 延遲按鍵放開，在搜尋功能時非常有用。
 */

jA.fn.delayKeyup = function(callback, ms)
{
    return this.each(function()
    {
        var timer = 0,
            el    = jA(this),
            that  = this

         jA(this).keyup(function(event)
         {
             var event = event

            clearTimeout(timer)

            timer = setTimeout(function()
            {
                 callback.call(that, event)
            }, ms)
         })
    })

}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/event/handler.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * on
 *
 * 綁定事件監聽器。
 */

jA.fn.on = function(eventName, selector, handler, once)
{
    once            = once || false
    var hasSelector = true

    if(typeof selector !== 'string')
    {
        hasSelector = false
        handler     = selector
    }

    if(typeof handler !== 'function')
        once = handler

    /**
     * [ts_eventHandler]
     *
     *        registered   :bool
     *      /
     * Click      func :func
     *      \   /
     *       [0]
     *          \
     *            once :bool
     */

    return this.each(function()
    {
        if(typeof this.addEventListener == 'undefined')
        {
            console.log('TOCAS ERROR: Event listener is not worked with this element.')
            return false
        }

        /** If the main event list of the element is not existed, we create one */
        if(typeof this.ts_eventHandler == 'undefined')
            this.ts_eventHandler = {}

        /** Split the event by space */
        var events = eventName.split(' ')

        for(var i in events)
        {
            var event = events[i]

            /** If the event handler list is not existed, we create an object, we will store function in here */
            /** so if someone triggered the event, we can just call this list. */
            if(typeof this.ts_eventHandler[event] == 'undefined')
                this.ts_eventHandler[event] = {registered: false, list: []}

            /** Bind if haven't bind yet */
            if(this.ts_eventHandler[event].registered === false)
            {
                this.addEventListener(event, function(evt)
                {
                    /** Just make sure this event still existed */
                    if(typeof this.ts_eventHandler[event] != 'undefined')
                    {
                        /** Execute all of the functions */
                        for(var e in this.ts_eventHandler[event].list)
                        {
                            /** If there's a selector */
                            if(typeof this.ts_eventHandler[event].list[e].selector !== 'undefined')
                            {
                                var inSelector = false

                                /** If this element is in the selector, then we set InSelector as true */
                                jA(this.ts_eventHandler[event].list[e].selector).each(function(i, el)
                                {
                                    if(evt.target === el) inSelector = true
                                })

                                /** We won't call this function if this elements which is triggered is not in the selector */
                                if(!inSelector) return
                            }

                            /** Execute */
                            this.ts_eventHandler[event].list[e].func.call(this, evt)

                            /** If "once" is true, we remove it after call it */
                            if(this.ts_eventHandler[event].list[e].once)
                                delete this.ts_eventHandler[event].list[e]
                        }
                    }
                })

                this.ts_eventHandler[event].registered = true
            }

            /** Push handler or anonymous function into that event list */
            var eventHandler = this.ts_eventHandler[event].list,
                data         = {func: handler, once: once}

            /** Store the selector if there's selector */
            if(hasSelector)
                data.selector = selector

            /** Store the function info*/
            eventHandler.push(data)

            this.ts_eventHandler[event].list = eventHandler
        }
    })
}

/**
 * one
 *
 * 綁定僅觸發一次的事件監聽器。
 */

jA.fn.one = function(eventName, selector, handler)
{
    return this.each(function()
    {
        /** Set "once" true, it will auto remove once we call it */
        jA(this).on(eventName, selector, handler, true)
    })
}

/**
 * off
 *
 * 移除指定的事件監聽器。
 */

jA.fn.off = function(eventName, handler)
{
    return this.each(function()
    {
        /** No list no talk */
        if(typeof this.ts_eventHandler            == 'undefined') return
        if(typeof this.ts_eventHandler[eventName] == 'undefined') return

        /** If there's no handler name, we remove all handler */
        if(handler == null)
        {
            this.ts_eventHandler[eventName].list = []
            return
        }

        /** Otherwise we search for the index of function, then remove it */
        for(var e in this.ts_eventHandler[eventName].list)
            if(handler === this.ts_eventHandler[eventName].list[e].func)
                delete this.ts_eventHandler[eventName].list[e]
    })
}





/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/extend/avg-color.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * avgColor
 *
 * 將圖片轉換成 Canvas 然後取得其中的平均色。
 *
 * 來源 https://tech.mozilla.com.tw/posts/5355/%E5%9C%A8-firefox-os-%E5%8F%96%E5%9C%96%E7%89%87%E8%89%B2%E5%BD%A9%E5%B9%B3%E5%9D%87%E5%80%BC%E4%B9%8B%E4%BA%8C%E4%B8%89%E4%BA%8B
 */

jA.fn.avgColor = function(type)
{
    type = type || null

    if(0 in this)
    {
        var img = this[0]

        /** Create a canvas for getting avg color */
        var canvas    = document.createElement('canvas')
        canvas.width  = img.width
        canvas.height = img.height

        /** Draw this picture to the canvas */
        var context = canvas.getContext('2d')
        context.drawImage(img, 0, 0, img.width, img.height)

        if(img.width <= 0 || img.height <= 0)
            return false

        /** Get the result of the pixels */
        var data = context.getImageData(0, 0, img.width, img.height).data,
            r    = 0, g = 0, b = 0

        /** Get the all average of the pixels */
        for (var row = 0; row < img.height; row++)
        {
            for (var col = 0; col < img.width; col++)
            {
                r += data[((img.width * row) + col) * 4]
                g += data[((img.width * row) + col) * 4 + 1]
                b += data[((img.width * row) + col) * 4 + 2]
            }
        }

        r /= (img.width * img.height)
        g /= (img.width * img.height)
        b /= (img.width * img.height)

        r = Math.round(r)
        g = Math.round(g)
        b = Math.round(b)

        if(type !== null)
        {
            switch(type.toUpperCase())
            {
                case 'R'   : return r; break
                case 'G'   : return g; break
                case 'B'   : return b; break
                case 'RGB' : return [r, g, b]; break
            }
        }

        /** Return the color with 16 bits */
        return '#' + ((r << 16) | (g << 8) | b).toString(16)
    }
    else
    {
        return null
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/extend/draw.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * colorWheel
 *
 * 在目前的 Canvas 元素上產生一個顏色圓盤。
 *
 * 來源 http://ariya.ofilabs.com/2011/02/color-wheel-on-canvas.html
 */

jA.fn.colorWheel = function(Sat, Hue)
{
    return this.each(function()
    {
        var el = this,
            context = el.getContext('2d'),
            width = parseInt(jA(this).css('width')),
            height = parseInt(jA(this).css('height')),
            cx = width / 2,
            cy = height / 2,
            radius = width / 1,
            imageData,
            pixels,
            hue, sat, value,
            i = 0, x, y, rx, ry, d,
            f, g, p, u, v, w, rgb

        imageData = context.createImageData(width, height)
        pixels = imageData.data

        for (y = 0; y < height; y = y + 1)
        {
            for (x = 0; x < width; x = x + 1, i = i + 4)
            {
                rx = x - cx
                ry = y - cy
                d = rx * rx + ry * ry
                if (d < radius * radius)
                {
                    hue = 6 * (Math.atan2(ry, rx) + Math.PI) / (2 * Math.PI)
                    sat = Math.sqrt(d) / (width / 2.3)
                    g = Math.floor(hue)
                    f = hue - g
                    u = 255 * (1 - sat)
                    v = 255 * (1 - sat * f)
                    w = 255 * (1 - sat * (1 - f))
                    pixels[i] = [255, v, u, u, w, 255, 255][g]
                    pixels[i + 1] = [w, 255, 255, v, u, u, w][g]
                    pixels[i + 2] = [u, u, w, 255, 255, v, u][g]
                    pixels[i + 3] = 255
                }
            }
        }

        context.putImageData(imageData, 0, 0)
    })
}

/**
 * picker
 *
 * 在目前的 Canvas 元素上監聽滑鼠事件，並且將滑鼠點下的像素顏色回傳給 Callback。
 */

jA.fn.picker = function(Callback)
{
    if(typeof Callback !== 'undefined')
        return this.each(function()
        {
            mouseDown = false

            jA(this).mousedown(function()
            {
                mouseDown = true
            })
            jA(this).mouseup(function()
            {
                mouseDown = false
            })
            jA(this).mousemove(function(e)
            {
                if(mouseDown)
                {
                    /** Get canvas as 2d first, so we can use getImageData later */
                    var c2d = this.getContext('2d'),
                        /** Get the position where the user click */
                        rect = this.getBoundingClientRect(),
                        x = e.clientX - rect.left,
                        y = e.clientY - rect.top,
                        color = c2d.getImageData(x, y, 1, 1).data

                    /** Call the function which the user want and brings the color info */
                    Callback(color)
                }
            })
        })
}

/**
 * grayColor
 *
 * 產生一個寬的灰階顏色盤。
 */

jA.fn.grayColor = function()
{
    return this.each(function()
    {
        var c2d = this.getContext('2d'),
            w = parseInt(jA(this).css('width')),
            h = parseInt(jA(this).css('height')),
            /** Generate gradient */
            grd = c2d.createLinearGradient(w, 0, 0, 0)

        grd.addColorStop(0, 'black')
        grd.addColorStop(1, 'white')

        /** Create a rect then fill with the gradient */
        c2d.fillStyle = grd
        c2d.fillRect(0, 0, w, h)
    })
}

/**
 * drawable
 *
 * 讓目前的 Canvas 元素可供繪圖。
 */

jA.fn.drawable = function()
{
    return this.each(function()
    {
        /**
         * Create A Temporary Canvas
         */

        var canvas = document.createElement('canvas')

        /** name this canvas, so we can generate many of them ;) */
        canvas.id = this.id + '-temp'
        canvas.width = this.width
        canvas.height = this.height

        /** Hide this temp canvas */
        canvas.className += ' ' + 'hidden'

        /** Write into document */
        this.parentNode.appendChild(canvas)


        /**
         * Set Value
         */

        /** Set the name of the temporary canvas */
        this.drawTemp = canvas.id

        /** Set default tool */
        this.drawUsing = 'pencil'

        /** Set line width */
        this.drawWidth = 1

        /**
         * Tool Calling
         *
         * Everytime we get the event(mousemove, down, up), we call the tool function which we using now.
         */

        /** Create a handle function for those drawing */
        this.drawProcess = function(e)
        {
            /** Get mouse position in canvas */
            if (e.layerX || ev.layerX == 0) {
                e._x = e.layerX
                e._y = e.layerY
            // Opera
            } else if (e.offsetX || e.offsetX == 0) {
                e._x = e.offsetX
                e._y = e.offsetY
            }

            var tool = new this.drawTools[this.drawUsing]

            /** Call the tool which we are using and our action(mouseup, down, move) now  */
            tool[e.type](e)
        }



        /** Bind this canvas with mouse events, so we can handle it */
        jA(this).on('mousedown mouseup mousemove', this.drawProcess)


    })
}

/**
 * tool
 *
 * 要在目前可供繪圖的 Canvas 元素上新增何種繪圖工具？
 * 我們稍後可以透過 `changeTool` 來啟用。
 */

jA.fn.tool = function(tools)
{
    return this.each(function()
    {
        this.drawTools = {}
        var canvas = this,
            c2d = this.getContext('2d'),
            /** Split the tools by space */
            list = tools.split(' ')

        /** Add tools into the object of the canvas, so we can use it */
        for(var i in list)
        {
            switch(list[i])
            {
                case 'pencil':
                    this.drawTools.pencil = function()
                    {

                        this.mousedown = function(e)
                        {
                            canvas.drawSwitch = true

                            c2d.beginPath()
                            c2d.moveTo(e._x, e._y)
                        }

                        this.mousemove = function(e)
                        {
                            /** Only do it while drawing */
                            if(!canvas.drawSwitch) return

                            c2d.lineTo(e._x, e._y)
                            c2d.lineCap = 'round'
                            c2d.lineWidth = canvas.drawWidth
                            c2d.strokeStyle = canvas.drawColor
                            c2d.stroke()
                        }

                        this.mouseup = function(e)
                        {
                            canvas.drawSwitch = false
                        }
                    }
                    break

                case 'rect':
                    this.drawTools.rect = function()
                    {

                        this.mousedown = function(e)
                        {
                            canvas.drawSwitch = true

                            canvas.x0 = e._x
		                    canvas.y0 = e._y
                        }

                        this.mousemove = function(e)
                        {
                            if(!canvas.drawSwitch) return

                            var x = Math.min(e._x,	canvas.x0),
                                y = Math.min(e._y,	canvas.y0),
                                w = Math.abs(e._x - canvas.x0),
                                h = Math.abs(e._y - canvas.y0);

                            c2d.clearRect(0, 0, canvas.width, canvas.height)

                            if (!w || !h) {
                                return
                            }

                            c2d.strokeStyle = canvas.drawColor
                            c2d.strokeRect(x, y, w, h)
                        }

                        this.mouseup = function(e)
                        {
                            canvas.drawSwitch = false
                        }
                    }
                    break
            }
        }
    })
}

/**
 * changeColor
 *
 * 透過 Hex 顏色更改目前 Canvas 元素的繪圖顏色。
 */

jA.fn.changeColor = function(HEX)
{
    return this.each(function()
    {
        /** If we got an array, we convert it to HEX, otherwise just apply it */
        this.drawColor = (typeof HEX !== 'string') ? ToHEX(HEX)
                                                   : HEX
    })
}

/**
 * changeTool
 *
 * 更改繪圖工具。
 */

jA.fn.changeTool = function(tool)
{
    return this.each(function()
    {
        this.drawUsing = tool
    })
}

/**
 * c2d
 *
 * 回傳目前 Canvas 元素的 Context2D。
 */

jA.fn.c2d = function()
{
    return 0 in this ? this[0].getContext('2d')
                     : null
}

/**
 * linePreview
 *
 * 建立一個用來預覽直線的 Canvas 畫布。
 */

jA.fn.linePreview = function(width, lineCap)
{
    width = width || 1
    lineCap = lineCap || 'round'

    return this.each(function()
    {
        var c2d = this.getContext('2d')

        /** Clear the last time we drawed */
        c2d.clearRect(0, 0, this.width, this.height)

        /** Draw a 'S' line */
        c2d.beginPath()
        c2d.moveTo(20,20)
        c2d.bezierCurveTo(50, 50, 120, 0, 150, 20)

        /** Set the style of this line */
        c2d.lineWidth = width
        c2d.lineCap = lineCap

        c2d.stroke()
    })
}

/**
 * setLineWidth
 *
 * 設定目前可供繪圖的 Canvas 筆畫粗度。
 */

jA.fn.setLineWidth = function(width)
{
    width = width || 1

    return this.each(function()
    {
        this.drawWidth = width
    })
}

/**
 * ToHEX
 *
 * 將 RGB 轉換成 Hex。
 */

function ToHEX(rgb)
{
    return '#' + ((rgb[0] << 16) | (rgb[1] << 8) | rgb[2]).toString(16)
}

/**
 * tempCanvas
 *
 * 建立暫時性的 Canvas 因為 Canvas 沒有圖層效果。
 */

jA.fn.tempCanvas = function()
{
    return this.each(function()
    {
        /** Create a temporary canvas */
        var canvas = document.createElement('canvas')

        /** name this canvas, so we can generate many of them ;) */
        canvas.id = this.id + '-temp'
        canvas.width = this.width
        canvas.height = this.height

        /** Hide this temp canvas */
        canvas.className += ' ' + 'hidden'

        /** Write into document */
        this.parentNode.appendChild(canvas)

        this.drawTemp = canvas.id
    })
}

/**
 * updateCanvas
 *
 * 將暫時性的 Canvas 畫布上的內容繪製到目前的 Canvas 上。
 */

jA.fn.updateCanvas = function()
{
    return this.each(function()
    {
        var canvas = jA('#' + this.drawTemp)[0],
            c2do = this.getContext('2d'),
            c2d = canvas.getContext('2d')


        c2do.drawImage(canvas, 0, 0)
        c2d.clearRect(0, 0, canvas.width, canvas.height)
    })
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/extend/gen-date.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * genDate
 *
 * 生成年、月、日還有指定方向。
 */

jA.fn.genDate = function(type, direction)
{
    type      = type      || 'day'
    direction = direction || 'past'

    var now = new Date()

    return this.each(function(index, el)
    {
        var year  = now.getFullYear(),
            month = 1,
            day   = 1

        switch(type)
        {
            case 'year':
                for(var i = 0; i < 110; i++)
                {
                    var option      = document.createElement('option')
                        option.text = (direction == 'past') ? year-- : year++
                    el.add(option)
                }
                break

            case 'month':
                for(var i = 0; i < 12; i++)
                {
                    var option      = document.createElement('option')
                        option.text = (month < 10) ? '0' + month : month

                    month++
                    el.add(option)
                }
                break

            case 'day':
                for(var i = 0; i < 31; i++)
                {
                    var option      = document.createElement('option')
                        option.text = (day < 10) ? '0' + day : day

                    day++
                    el.add(option)
                }
                break
        }
    })
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/extend/geo.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * geo
 *
 * 取得使用者的地理位置，並且將資料回傳給 Callback。
 */

jA.geo = function(option)
{
    if(typeof option == 'undefined')
        return false

    /** Check some options is set or null, and gives some options a default value */
    var notSupported = typeof option.notSupported == 'function',
        error        = typeof option.error        == 'function',
        deny         = typeof option.deny         == 'function',
        highAccurary = typeof option.highAccurary != 'undefined' ? option.highAccurary : false,
        timeout      = typeof option.timeout      == 'number'    ? option.timeout      : 8000,
        maxAge       = typeof option.maxAge       == 'number',
        isFirefox    = navigator.userAgent.toLowerCase().indexOf('firefox') > -1,
        opt          = {
                           enableHighAccuracy: highAccurary,
                           timeout           : timeout
                       }

    /** Set the maximumAge if needed */
    if(maxAge)
        opt.maximumAge = maxAge

    /** Set the timer for the firefox */
    /** Firefox won't give us "Denied" status, so the only thing we can do is waiting for it timeout to call deny callback*/
    if(isFirefox)
        if(error)
            var firefoxTimer = setTimeout(function(){ option.error(3) }, timeout)
        else if(deny)
            var firefoxTimer = setTimeout(option.deny, timeout)

    /** Use the geolocation function if the borwser was supported the HTML5 geolocation */
    if(navigator.geolocation)
        navigator.geolocation.getCurrentPosition(function(position)
        {
            /** Clean the firefox "denied" timer */
            if(isFirefox)
                clearTimeout(firefoxTimer)

            /** Call to the success callback */
            option.success(position)
        },
        function(errorCode)
        {
            var denied    = (errorCode.code == errorCode.PERMISSION_DENIED)

            /** Clean the firefox "denied" timer */
            if(isFirefox)
                clearTimeout(firefoxTimer)

            /** Call error if error callback exists or deny callback when the callback exists and user denied it */
            if(error)
                option.error(errorCode)
            else if(deny && denied)
                option.deny()

        }, opt)
    /** Otherwise we call the notSupported callback if existed */
    else
        if(notSupported)
            option.notSupported()
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/extend/url-param.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * urlParam
 *
 * 取得網址的單個、多個參數。
 */

jA.urlParam = function(paramName)
{
    /** Are we getting all parameters or just a special one? */
    var getAll    = (typeof paramName === 'undefined'),

    /** Get the parameters which are behind the question mark, and split it with & symbol, so we'll get an array */
        params    = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&'),
        paramList = {}

    if(params.length == 0)
        return null

    for(var i in params)
    {
        /** Split single parameter, so [0] is the name, [1] is the value */
        var param = params[i].split('='),
            name  = param[0],
            value = (typeof param[1] !== 'undefined' && param[1] != '') ? param[1] : '' //Return the value or just a empty string

        /** This is the param which we are looking for, so we return the value! */
        if(name == paramName)
            return value

        /** We don't store the param which we are NOT looking for if we are NOT getting the all params */
        if(!getAll && name != paramName)
            continue

        /** Otherwise we push it into an object */
        paramList[name] = value
    }

    /** Return undefined if no param is found */
    return (Object.keys(paramList).length) ? paramList : undefined
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/form/serialize.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * serialize
 *
 * 將表單轉換成參數字串。
 */

jA.fn.serialize = function()
{
    var array = []

    this.each(function()
    {
        var z, a

        for (var z = 0; z < this.elements.length; z++)
        {
            var elements = this.elements[z],
                 name    = elements.name,
                 value   = elements.value

            /** If element's name is empty or disabled or no value, we skip this one */
            if(!name || elements.disabled || !value)
                continue

            switch (elements.nodeName)
            {
                case 'INPUT':
                    switch(elements.type)
                    {
                        case 'text'    :
                        case 'hidden'  :
                        case 'password':
                        case 'button'  :
                        case 'reset'   :
                        case 'submit'  :
                        case 'number'  :
                        case 'email'   :
                            array.push(name + '=' + encodeURIComponent(value))
                            break

                        case 'checkbox':
                        case 'radio'   :
                            /** No checked, we skip. */
                            if(!elements.checked)
                                continue

                            array.push(name + '=' + encodeURIComponent(value))
                            break
                    }
                    break

                case 'TEXTAREA':
                    array.push(name + '=' + encodeURIComponent(value))
                    break

                case 'SELECT':
                    switch(elements.type)
                    {
                        case 'select-one':
                            array.push(name + '=' + encodeURIComponent(value))
                            break

                        case 'select-multiple':
                            for(var a = 0; a < elements.options.length; a++)
                            {
                                var optionValue = elements.options[a].value

                                if (elements.options[a].selected)
                                    array.push(name + '=' + encodeURIComponent(optionValue))
                            }
                    }
                    break

                case 'BUTTON':
                    switch(elements.type)
                    {
                        case 'reset' :
                        case 'submit':
                        case 'button':
                            array.push(name + '=' + encodeURIComponent(value))
                    }
            }
         }
    })

    /** Prevent sending a object or array via XHR cause an error */
    return array.join('&').toString()
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/protocol/ajax.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * ajax
 *
 * 在非換頁的情況下傳遞 HTTP 請求取得資訊。
 */

jA.ajax = function(obj, type)
{
    if(obj == null)
        return false

    /** Is error handler existed or not */
    var errorCallback   = typeof obj.error !== 'undefined',
        successCallback = typeof obj.success !== 'undefined',
        isObjectData    = typeof obj.data  === 'object' && obj.data.constructor != FormData

    var d = new jA.deferred()

    /** Default */
    if(typeof obj.async === 'undefined')
        obj.async = true
    if(typeof obj.contentType === 'undefined' || obj.contentType == null)
        obj.contentType = 'application/x-www-form-urlencoded; charset=UTF-8'

    var XHR = new XMLHttpRequest()

    /** Set timeout */
    XHR.timeout = obj.timeout || 10000

    XHR.onload = function()
    {
        /** Call to statusCode if existed */
        if(typeof obj.statusCode != 'undefined' && typeof obj.statusCode[XHR.status] != 'undefined')
            obj.statusCode[XHR.status](XHR, XHR.responseText)

        if(XHR.status >= 200 && XHR.status < 400)
        {

            switch(obj.dataType)
            {
                case 'json':
                    if(jA.isJSON(XHR.responseText))
                    {
                        if(successCallback)
                            obj.success(JSON.parse(XHR.responseText), XHR)

                        d.resolve(JSON.parse(XHR.responseText), XHR)
                    }
                    else
                    {
                        if(errorCallback)
                            obj.error(XHR, 'parsererror')

                        d.reject(XHR, 'parsererror')
                    }
                    break
                case 'html':
                case 'text':
                case 'string':
                default:
                    if(typeof obj.success == 'function')
                    {
                        obj.success(XHR.responseText, XHR)

                        d.resolve(XHR.responseText, XHR)
                    }

                    if(typeof XHR.close == 'function')
                        XHR.close()
            }
        }
        else
        {
            if(errorCallback)
                obj.error(XHR, 'success')

            d.reject(XHR, 'success')
        }
    }

    /** When XHR timeout or error, we callback */
    XHR.ontimeout = function()
    {
        if(errorCallback)
            obj.error(XHR, 'timeout')

        d.reject(XHR, 'timeout')
    }

    XHR.onerror = function()
    {
        if(errorCallback)
            obj.error(XHR, 'error')

        d.reject(XHR, 'error')
    }

    /** If there's uploading process callback, we callback :D */
    if(typeof obj.uploading != 'undefined')
    {
        XHR.addEventListener('progress', function(e)
        {
            if(e.lengthComputable)
            {
                var percent = Math.round((e.loaded / e.total) * 100)
                obj.uploading(percent, e)
            }
        }, false)
    }

    /** Open a new connect */
    XHR.open(obj.type, obj.url, obj.async)

    /** If contentType is not FALSE, we set the request header */
    if(obj.contentType != false)
        XHR.setRequestHeader('Content-Type', obj.contentType)

    /** Set headers */
    if(typeof obj.headers != 'undefined')
        for(var i in obj.headers)
            XHR.setRequestHeader(i, obj.headers[i])

    /** If data is an object, we convert it to params */

    if(isObjectData)
    {
        /** explode the object into a string */
        var params = ''

        for(var i in obj.data)
            if(obj.data[i] !== undefined)
                params += i + '=' + obj.data[i] + '&' 

        /** Remove the unnecessary symbol at the end */
        params = params.slice(0, -1)
    }

    /** SENDDDD! */
    XHR.send((isObjectData) ? params : obj.data)

    return d
}

/**
 * getJSON
 *
 * 簡易型的 `ajax`，用以取得遠端 JSON 資料。
 */

jA.getJSON = function(url, callback)
{
    return jA.ajax({
        url: url,
        type: 'GET',
        dataType: 'json',
        success: callback,
    })
}

/**
 * xhrResponse
 *
 * 取得 XHR（AJAX）中的回應內容
 */

jA.xhrResponse = function(XHR, type)
{
    type = type || 'json'

    if(type === 'json')
        return JSON.parse(XHR.responseText)
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/protocol/pjax.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * pjax
 *
 * 透過 AJAX 來取得下一頁的頁面內容並且套用到目前的頁面上，
 * 這可以讓網頁不需重新整理就能達到換頁的效果，亦可更換頁面的局部畫面。
 */

jA.pjax = function(option)
{
    /**
     * Option
     * {
     *     container: '#content',
     *     url: jA(this).attr('href'),
     *     title: jA(this).attr('data-title')
     *     dataType: 'json',
     *     contentNode: 'html',
     *     titleNode: 'title',
     *     cache: true,
     *     expire: 86400,
     *     state: {blah: 'Im blah'},
     *     success: function
     * }
     */

    if(typeof history.pushState !== 'function')
        return false

    /** Check url hostname */
    var fakeLink      = document.createElement('a')
        fakeLink.href = option.url

    //if(fakeLink.host == '')
    //    fakeLink.href = fakeLink.href

    /** PJAX only works in same origin, so exit when cross-origin */
    if(fakeLink.hostname !== window.location.hostname)
        return false

    var pjaxFullURL = fakeLink.protocol + '//' + fakeLink.hostname + fakeLink.pathname,
        fullURL     = window.location.protocol + '//' + window.location.hostname + window.location.pathname

    /** Exit if the pjax url is just about add a hash or a anchor or even same */
    if(pjaxFullURL === fullURL)
        return false



    /**
     * PJAX
     */

    function pjax(obj)
    {
         /** Change the content */
        jA(obj.Container).html(obj.Content)

        /** Change the url */
        window.history.pushState(obj.State, obj.Title, obj.URL)

        /** Change the title */
        document.title = obj.Title

        /** Callback */
        if(typeof option.success != 'undefined')
            option.success(obj)

    }


    /** Set variables */
    var title      = option.title    || '',
        dataType   = option.dataType || 'html',
        url        = option.url,
        expire     = option.expire   || 3600,
        cache      = option.cache    || false,
        cachedName = 'cached_' + url

    /** Create a state with url and title */
    var state = {url: url, title: title}

    /** Merge state if needed */
    if(typeof option.state !== 'undefined')
        for(var i in option.state)
            state[i] = option.state[i]


    /**
     * Cache
     */

    /** If there's a cache in the storage */
    if(cachedName in localStorage && cache)
    {
        /** We stored JSON format in localStorage before, now we need to convert it to object */
        var obj = JSON.parse(localStorage.getItem(cachedName))

        /** If the state still same, we load the cache */
        /** But if we are using dynamic title(which is returned title as title), no matter what, just load the cache */
        if(JSON.stringify(obj.State) === JSON.stringify(state) || title === '')
        {
            var time = Math.floor(Date.now() / 1000) - obj.time

            /** Just be sure if it's not expired yet */
            if(expire && !(time > expire))
            {
                pjax(obj)
                return
            }
        }
    }


    /**
     * Request
     */

    jA.ajax(
    {
        url     : url,
        type    : 'GET',
        dataType: dataType,
        /** Send a PJAX header, so we can deal with it on the server side */
        headers: {'HTTP_X_PJAX': 'true'},
        success: function(result, xhr)
        {
            var title     = (option.dataType == 'json') ? result[option.titleNode]   : option.title,
                content   = (option.dataType == 'json') ? result[option.contentNode] : result,
                scriptTag = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi

            if(option.dataType == 'json' && typeof result[option.titleNode] == 'undefined')
                if(typeof option.title != 'undefined')
                    title = option.title
                else
                    title = ''

            if(option.dataType == 'json' && typeof result[option.contentNode] == 'undefined')
                content = result

            /** Remove the script in the content */
            content = content.replace(scriptTag, ' ')

            /** Replace the title in the state */
            state['title'] = title

            var data = {container: Option.container,
                        content: content,
                            url: url,
                          title: title,
                          state: state,
                           time: Math.floor(Date.now() / 1000)}

            /** Store this PJAX to web storage as cache, localStorage don't eat object, so we conver it to json format */
            localStorage.setItem(cachedName, JSON.stringify(data))

            pjax(data)
        }
    })
}

/**
 * load
 *
 * 透過 XHR 讀取 HTML 內容，然後替換到這個元件內的內容。
 */

jA.fn.load = function(url, data, callback)
{
    if(!this.length)
        return this

    return this.each(function()
    {
        var that    = this,
            options = {type: 'POST',
                       url: url,
                       dataType: 'html',
                       data: data},
            /** Split URL to two parts, first one is the URL, second one is the selector */
            split = url.split(/\s/), selector

        /** If selector is existed, then we get it */
        if(split.length > 1)
            options.url = split[0]
            selector    = split[1]

        options.success = function(result)
        {
            var scriptTag = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi

            /** Replace the html, use selector if existed */
            jA(that).html(selector ? jA(document.createElement('div')).html(result.replace(scriptTag, ' ')).find(selector).html() : result)
        }

        jA.ajax(options)
    })
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/protocol/sse.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * sse
 *
 * 專門處理 Server Sent-Event 的函式。
 */

jA.sse = function(obj)
{
    var sse = new EventSource(obj.url)

    /** Message */
    if(typeof obj.message == 'object')
        for(var i in obj.message)
            sse.addEventListener(i, obj.message[i], false)
    else if(typeof obj.message !== 'undefined')
        sse.onmessage = obj.message

    /** Error */
    if(typeof obj.error !== 'undefined')
        sse.onerror = obj.error

    /** Open */
    if(typeof obj.open !== 'undefined')
        sse.addEventListener('open', obj.open, false)
}


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/protocol/rest.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * post
 *
 * `ajax` 中以 POST 送出的簡寫函式。
 */

jA.post = function(url, data, dataType)
{
    dataType = dataType || 'json'

    var d      = new jA.deferred()
    var config =
    {
        url     : url,
        type    : 'POST',
        dataType: dataType,
        data    : data,
        error   : function(r){d.reject(r)},
        success : function(r){d.resolve(r)}
    }

    if(jA.isJSON(data))
        config.contentType = 'application/json; charset=UTF-8'

    jA.ajax(config)

    return d
}

/**
 * patch
 *
 * `ajax` 中以 PATCH 送出的簡寫函式。
 */

jA.patch = function(url, data, dataType)
{
    dataType = dataType || 'json'

    var d      = new jA.deferred()
    var config =
    {
        url     : url,
        type    : 'PATCH',
        dataType: dataType,
        data    : data,
        error   : function(r){d.reject(r)},
        success : function(r){d.resolve(r)}
    }

    if(jA.isJSON(data))
        config.contentType = 'application/json; charset=UTF-8'

    jA.ajax(config)

    return d
}

/**
 * delete
 *
 * `ajax` 中以 DELETE 送出的簡寫函式。
 */

jA.delete = function(url, data, dataType)
{
    dataType = dataType || 'json'

    var d      = new jA.deferred()
    var config =
    {
        url     : url,
        type    : 'DELETE',
        dataType: dataType,
        data    : data,
        error   : function(r){d.reject(r)},
        success : function(r){d.resolve(r)}
    }

    if(jA.isJSON(data))
        config.contentType = 'application/json; charset=UTF-8'

    jA.ajax(config)

    return d
}

/**
 * put
 *
 * `ajax` 中以 PUT 送出的簡寫函式。
 */

jA.put = function(url, data, dataType)
{
    dataType = dataType || 'json'

    var d      = new jA.deferred()
    var config =
    {
        url     : url,
        type    : 'PUT',
        dataType: dataType,
        data    : data,
        error   : function(r){d.reject(r)},
        success : function(r){d.resolve(r)}
    }

    if(jA.isJSON(data))
        config.contentType = 'application/json; charset=UTF-8'

    jA.ajax(config)

    return d
}

/**
 * get
 *
 * `ajax` 中以 GET 送出的簡寫函式。
 */

jA.get = function(url, data, dataType)
{
    data     = data     || null
    dataType = dataType || 'json'

    var params = ''

    var d = new jA.deferred()

    if(data !== null)
    {
        /** explode the object into a string */
        var params = ''

        for(var i in data)
            params += i + '=' + data[i] + '&'

        /** Remove the unnecessary symbol at the end */
        params = '?' + params.slice(0, -1)
    }

    var config =
    {
        url     : url + params,
        type    : 'GET',
        dataType: 'json',
        error   : function(r){d.reject(r)},
        success : function(r){d.resolve(r)}
    }

    jA.ajax(config)

    return d
}


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js from "js_merge.txt" begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/* Last merge : Sat Mar 12 21:23:01 UTC 2016  */

/* Merging order :

- src/jasper.js
- src/core/deferred.js
- src/core/helper.js
- src/element/attr.js
- src/element/content.js
- src/element/cookie.js
- src/element/css.js
- src/element/validate.js
- src/element/dom.js
- src/element/visibility.js
- src/form/serialize.js
- src/form/form-explode.js
- src/form/form-validate.js
- src/event/binder.js
- src/event/common.js
- src/event/handler.js
- src/extend/avg-color.js
- src/extend/gen-date.js
- src/extend/geo.js
- src/extend/url-param.js
- src/form/serialize.js
- src/protocol/ajax.js
- src/protocol/pjax.js
- src/protocol/sse.js
- src/protocol/rest.js

*/


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/jasper.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/*
   ,,
   db       db
           ;MM:
 `7MM     ,V^MM.    ,pP"Ybd `7MMpdMAo.  .gP"Ya `7Mb,od8
   MM    ,M  `MM    8I   `"   MM   `Wb ,M'   Yb  MM' "'
   MM    AbmmmqMA   `YMMMa.   MM    M8 8M""""""  MM
   MM   A'     VML  L.   I8   MM   ,AP YM.    ,  MM
   MM .AMA.   .AMMA.M9mmmP'   MMbmmd'   `Mbmmd'.JMML.
QO MP                         MM
`bmP                        .JMML.

                   contributors

          ZeptoJS   : http://goo.gl/yFtHui
          Slide     : http://goo.gl/VjYiOU
          Serialize : http://goo.gl/UTqTzI
          AvgColor  : http://goo.gl/eGcxJ5
          Library   : http://goo.gl/ECZAWR
          isNumeric : http://goo.gl/0qmDLc
*/


/**
 * Jasper Main Library
 *
 * The main jasper code.
 */

var Jasper = (function ()
{
    var jA,
        emptyArray          = [],
        slice               = emptyArray.slice,
        filter              = emptyArray.filter,
        queue               = [],
        jasper              = {},
        isArray             = Array.isArray || function(obj){ return obj instanceof Array  },
        isObject            = function(obj){ return obj instanceof Object },
        isEmptyOrWhiteSpace = function(str){ return str === null || str.match(/^\s*$/) !== null },
        dropzoneNumber      = 0;

    /** Filter those thing which is we don't need it */
    function compact(array)
    {
        return filter.call(array, function(item){ return item != null; });
    }

    jasper.init = function(selector, context)
    {
        var dom;

        /** If Selector is a normal string */
        if(typeof selector == 'string')
        {
            if(selector[0] == '<')
                return jasper.fragment(selector);

            /** Remove the space */
            selector = selector.trim();

            if(typeof Context != 'undefined')
                return jA(selector).find(context);

            dom = jasper.select(document, selector);
        }
        else if(jasper.isJasper(selector))
        {
            return selector;
        }
        else
        {
            /** Filter for eq function */
            if(isArray(selector))
                dom = compact(selector);
            /** If Selector is object, which means it may generated by Jasper */
            else if(isObject(selector))
                dom = [selector], selector = null;
        }

        return jasper.Jasper(dom, selector);
    }

    jasper.fragment = function(selector)
    {
        var noContent    = /^<([^\/].*?)>$/,
            regEx        = /(?:<)(.*?)( .*?)?(?:>)/,
            match        = regEx.exec(selector),
            // <div class="foo" bar="BARRRR">
            mainAll      = match[0],
            // div
            mainElement  = match[1],
            // class="foo" bar="BARRRR"
            mainAttrs    = match[2],
            hasAttr      = typeof mainAttrs !== 'undefined',
            hasContent   = !mainAll.match(noContent);



        /** Is this tag IS a container tag? (ex: div, section) */
        if(hasContent)
        {
            /** Catch the content of it */
            var contentRegEx = new RegExp(mainAll + '(.*?)(?:<\/' + mainElement + '>)$'),
                contentMatch = contentRegEx.exec(selector),
                content      = contentMatch[1];
        }


        /** Split Attrs into an array like this [KEY, VALUE, KEY, VALUE] */
        if(hasAttr)
        {
            var attrs   = mainAttrs.split(/(?:\s)?(.*?)=(?:"|')(.*?)(?:"|')/).filter(Boolean),
                attrObj = {};

            /** Get odd and even values, convert [KEY, VALUE, KEY, VALUE] to {KEY: VALUE, KEY: VALUE} */
            for(var i = 0; i < attrs.length; i++)
                if( (i + 2) % 2 == 0)
                     attrObj[attrs[i]] = attrs[i + 1];
        }

        var $element = jA(document.createElement(mainElement));

        if(hasAttr)
            $element.attr(attrObj);

        if(hasContent)
            $element.html(content);

        return $element;
    }



    jasper.isJasper = function(obj)
    {
        return obj instanceof jasper.Jasper;
    }

    jasper.select = function(element, selector)
    {
        try
        {
            return slice.call(element.querySelectorAll(selector));
        }
        catch(e)
        {
            console.log('TOCAS ERROR: Something wrong while selecting ' + selector + ' element.');
        }
    }

    jasper.Jasper = function(dom, selector)
    {
        dom           = dom || [];
        dom.__proto__ = jA.fn;
        dom.selector  = selector || '';

        return dom;
    }




    /**
     * $
     *
     * Call to Init to get everything ready.
     */

    jA = function(selector, context)
    {
        if(typeof selector == 'function')
            document.addEventListener('DOMContentLoaded', selector)
        else
            return jasper.init(selector, context);
    };




    /**
     * Library
     */

    jA.fn =
    {
        /**
         * Each
         */

        each: function(callback)
        {
            emptyArray.every.call(this, function(index, element)
            {
                return callback.call(index, element, index) !== false;
            });

            return this;
        },




        /**
         * Slice
         */

        slice: function()
        {
            /** Regenerate a new object */
            return jA(slice.apply(this, arguments));
        },




        /**
         * Eq
         *
         * Jump to target element.
         */

        eq: function(index)
        {
            return this.slice(index, + index + 1);
        }


}

    if(!window.jA) window.jA = jA;

})(Jasper);


/**
 * Secondary Selector
 *
 * For sometimes we want to use the javascript's own object not our own functions.
 */

function $_(Selector)
{
    var Obj = document.querySelectorAll(Selector);
    return (Obj.length == 0) ? false : (Obj.length == 1) ? Obj[0] : Obj;
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/core/deferred.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 *
 * @source http://stackoverflow.com/questions/18096715/implement-deferred-object-without-using-jquery
 * @supported THEtheChad
 */

jA.deferred = function()
{
    this._always = [];
    this._done   = [];
    this._fail   = [];
}

jA.deferred.prototype =
{
    execute: function(list, args)
    {
        var i = list.length;

        args = Array.prototype.slice.call(args);

         while(i--) list[i].apply(null, args);
    },

    anyway: function()
    {
        this.execute(this._always, arguments);
        return this
    },

    resolve: function()
    {
        this.execute(this._done, arguments);
        return this
    },

    reject: function()
    {
        this.execute(this._fail, arguments);
        return this
    },

    then: function()
    {
        return this
    },

    done: function(callback)
    {
        this._done.push(callback);
        return this
    },

    fail: function(callback)
    {
        this._fail.push(callback);
        return this
    },

    always: function(callback)
    {
        this._always.push(callback);
        return this
    }
}



/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/core/helper.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


jA.isJSON = function(string)
{
    /** Detect the type of the respone is json or not */
    var isJSON = true;

    try     { JSON.parse(string); }
    catch(e){ var isJSON = false; }

    return isJSON;
}


jA.inArray = function(item, targetArray)
{
    return targetArray.indexOf(item);
}


/**
 * Is Numeric
 *
 *
 */
jA.isNumeric = function(number)
{
    return !isNaN(parseFloat(Number)) && isFinite(Number);
}







/**
 * Random
 *
 * Generate a random number.
 */

jA.rand = function(min, max)
{
    return Math.floor(Math.random() * (max - min + 1) + min);
}




jA.digits = function(number)
{
    return number.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "jA1,");
}


jA.isset = function()
{
    // discuss at: http://phpjs.org/functions/isset
    // +   original by: Kevin van     Zonneveld (http://kevin.vanzonneveld.net)
    // +   improved by: FremyCompany
    // +   improved by: Onno Marsman
    // +   improved by: RafaÅ‚ Kukawski
    // *     example 1: isset( undefined, true);
    // *     returns 1: false
    // *     example 2: isset( 'Kevin van Zonneveld' );
    // *     returns 2: true
    var a = arguments,
        l = a.length,
        i = 0,
        undef;

    if (l === 0) {
        throw new Error('Empty isset');
    }

    while (i !== l) {
        if (a[i] === undef || a[i] === null) {
            return false;
        }
        i++;
    }
    return true;
}



jA.setTimeout = function(timer)
{
    var d = new jA.deferred();
    var that = this;

    setTimeout(function(r)
    {
        d.resolve(r);
    }, timer);

    return d;
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/element/attr.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * Attr
 * 
 * Add a attribute to an element.
 * 
 * @param string attr    The name of the attribute.
 * @param mixed  value   The value of the attribute.
 * 
 * @return mixed
 */
 
jA.fn.attr = function(attr, value)
{
    value = (value === null) ? null : value;
    
    /** Set multiple Attr if Attr is object */
    if(typeof attr === 'object' && !value)
        return this.each(function(){ for(var i in attr) this.setAttribute(i, attr[i]); });
    
    /** Set single attr */
    else if(attr != null && value != null)
        return this.each(function(){ this.setAttribute(attr, value); });

    /** Get single attr only if Attr is not null */
    else if(attr != null && !value)
        return 0 in this ? this[0].getAttribute(attr) : null;
}




/**
 * Remove Attr
 * 
 * Remove an attribute from an element.
 * 
 * @param string attr   The name of the attribute.
 * 
 * @return object
 */
 
jA.fn.removeAttr = function(attr)
{
    return this.each(function(){ this.removeAttribute(attr); });
}



/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/element/content.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * Val
 * 
 * Get the value or set the value of an element.
 * 
 * @param string|int value   Leave this undefined if we want to get the value instead of set it.
 * 
 * @return mixed
 */

jA.fn.val = function(value)
{
    if(value == null)
    {
        if(0 in this)
            if(this[0].nodeName == 'SELECT')
                return this[0].options[this[0].selectedIndex].value;
            else
                return this[0].value;
        else
            return null;
    }
    else 
    {
        return this.each(function(){ this.value = value });
    }
}




/**
 * Empty
 * 
 * Clean a field or a container.
 * 
 * @return object
 */

jA.fn.empty = function()
{
    return this.each(function()
    {
        if(this.innerHTML != 'undefined') this.innerHTML = '';
        if(this.value     != 'undefined') this.value     = '';
    });
}




/**
 * Text
 * 
 * Set a text for an element, or get the text when the parameter is underfined.
 * 
 * @param string text   The text we want to set.
 * 
 * @return mixed
 */

jA.fn.text = function(text)
{
    if(text === undefined)
        return 0 in this ? this[0].innerText : null;
    else
        return this.each(function(){ this.textContent = text; });
}




/**
 * HTML
 * 
 * Set a html content or get the html content if the parameter is undefined.
 * 
 * @param string html   The html content.
 * 
 * @return mixed
 */

jA.fn.html = function(html)
{
    html = html || null;
    
    if(!html)
        return 0 in this ? this[0].innerHTML : null;
    else 
        return this.each(function(){ this.innerHTML = html });
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/element/cookie.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * Cookie
 * 
 * Get, edit, remove a cookie.
 * 
 * @param string name      The name of the cookie
 * @param string value     The value of the cookie, keep it blank if you want to remove the cookie.
 * @param object options   The options.
 * 
 * @return mixed
 */

jA.cookie = function(name, value, options)
{
    /** If value is not null, means this is SET a cookie, not GET a cookie */
    if(value != null)
    {
        var expire = (options instanceof Object && typeof options.expires != 'undefined') ? options.expires : 365,
            domain = (options instanceof Object && typeof options.domain  != 'undefined') ? ' domain=' + options.domain + ';' : '',
            path   = ' path=' + (options instanceof Object && typeof options.path != 'undefined' ? options.path : '/') + ';';
        
        var d = new Date();
        
        /** If Options is not object but -1, means user want to delete this cookie, so we given a expired time */
        if(!options instanceof Object && options === -1)
            d.setTime(d.getTime() - (24 * 60 * 60 * 1000));
        else
            d.setTime(d.getTime() + (expire * 24 * 60 * 60 * 1000));

        /** Convert the time to cookie format */
        var expires = 'expires=' + d.toUTCString() + ';';

        /** Set the cookie */
        document.cookie = name + '=' + (value || '') + '; ' + expires + domain + path;
    }
    else
    {
        var cookieName = name + '=',
            list       = document.cookie.split(';');
            
        for(var i in list)
        {
            var cookie = list[i];

            /** If first word is blank, then get content without blank */
            while(cookie.charAt(0)==' ')
                cookie = cookie.substring(1);

            /** Get the value of cookie*/
            if(cookie.indexOf(cookieName) != -1)
                return cookie.substring(cookieName.length, cookie.length);
        }
    }
    
    return 'undefined';
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/element/css.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * Css Animate
 *
 * Animate a css animation.
 *
 * @param string   animate    The name of the animation
 * @param func|int callback   The callback when the animation ended, or the animation time.
 * @param int      time       The animation time.
 */

jA.fn.cssAnimate = function(animate, callback, time)
{
    /** Animate list */
    //var animateList = 'slideInDown slideInLeft slideInRight slideInUp slideOutDown slideOutLeft slideOutRight slideOutUp'

    /** If someone using callback field as time.. */
    if(typeof callback == 'number')
        time = callback;

    /** Turn millionsecond to float (ex: 300 -> 0.3), then turn float to string and remove the dot (0.3 -> 03 -> 3)*/
    var timer = parseInt((time / 1000).toString().replace('.', ''), 10);
        timer = time < 1000 ? '0' + timer : timer;

    /** Select animation duration by Time */
    time = isNaN(time) ? '' : ' animated' + timer + 's';

    var d        = new jA.deferred(),
        veryThat = this;

    this.each(function()
    {
        /** For passing jA(this) to inside function */
        var that = this;


        /** If last animation not end .. */
        //if(jA(this).hasClass(Animate))
            //jA(this).off('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend').removeClass(animateList).removeClass(animate + ' animated' + time)

        /** Add animation */
        jA(this).addClass(animate + ' animated' + time)
               /** Once the animation end, we remove the animate class and callback **/
               .one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function()
                {
                   jA(that).removeClass(animate + ' animated' + time);

                   //if((typeof callback !== 'undefined' && callback != null) && typeof callback !== 'number')
                   //     callback.call(that);
                   d.resolve(that);
                });
    });

    return d;
}




/**
 * CSS
 *
 * Set CSS to elements or get CSS from elements.
 *
 * @param mixed      property   Can be a object and the key as the css property, and the value as the property value.
 * @param int|string value      The value of the css property.
 *
 * @return mixed
 */

jA.fn.css = function(property, value)
{
    var css = '';

    /** Set single CSS : If CSS and content is not empty, then set the CSS */
    if(property != null && value != null)
    {
        css = property + ':' + value + ';';
    }
    /** Set multi CSS : If CSS is a Object */
    else if(typeof Property === 'object' && !Array.isArray(property) && value == null)
    {
        for(var i in property)
            if(property.hasOwnProperty(i))
                css += i + ':' + property[i] + ';';
    }
    /** Get multi CSS : If style name is a array and have only key */
    else if(Array.isArray(property) && value == null)
    {
        var cssObject = {};

        this.each(function(){ for(var i in property) cssObject[property[i]] = jA(this).getCss(property[i]); })

        return cssObject;
    }
    /** Get single CSS : If only style name */
    else if(property != null && value == null)
    {
        return jA(this).getCss(property);
    }

    return this.each(function()
    {
        if(typeof this.style == 'undefined')
            return;

        this.style.cssText = this.style.cssText + css;
    })
}




/**
 * Has Class
 *
 * Returns true when the class(es) does exist.
 *
 * @param string classes   The class name, can be a list split by the space.
 *
 * @return bool
 */

jA.fn.hasClass = function(classes)
{
    if(0 in this)
        if(this[0].classList)
            return this[0].classList.contains(classes);
        else
            return new RegExp('(^| )' + classes + '( |$)', 'gi').test(this[0].className);
}




/**
 * Class List
 *
 * Returns a class list of the element.
 *
 * @return array
 */

jA.fn.classList = function()
{
    var classes = [];

    if(0 in this)
        if(this[0].classList)
            for(var i=0; i<this[0].classList.length; i++)
                classes.push(this[0].classList[i]);
        else
            for(var i in this[0].className.split(' '))
                classes.push(this[0].className.split(' ')[i]);

    return classes;
}




/**
 * Add Class
 *
 * Add a single or multiple classes to an element.
 *
 * @param string classes   The name of the class, can be a list split by space.
 *
 * @return object
 */

jA.fn.addClass = function(classes)
{
    if(classes === null)
        return;

    return this.each(function()
    {
        var list = classes.split(' ');

        for(var i in list)
        {
            if(list[i] === '')
                continue;

            if(this.classList)
                this.classList.add(list[i]);
            else
                this.className += ' ' + list[i];
        }
    });
}




/**
 * Remove Class
 *
 * Remove a single or multiple classes of the element.
 *
 * @param string classes   The name of the class can be a list split by the space.
 *
 * @return object
 */

jA.fn.removeClass = function(classes)
{
    return this.each(function()
    {
        if(!classes)
        {
            this.className = '';
        }
        else
        {
            var list = classes.split(' ');

            for(var i in list)
            {
                if(list[i] == '')
                    continue;

                /** If there's classList, the just remove it from classList, otherwise we replace the string which is in the (class="")*/
                if(this.classList)
                    this.classList.remove(list[i]);
                else if(typeof this.className !== 'undefined')
                    this.className = this.className.replace(new RegExp('(^|\\b)' + classes.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
            }
        }
    })
}




/**
 * Toggle Class
 *
 * Toggle a single or multiple classes, add the class when the class is not existed, and remove the class when it does exist.
 *
 * @param string classes   The name of the class, can be a list split by the space.
 *
 * @return object
 */

jA.fn.toggleClass = function(classes)
{
    return this.each(function()
    {
        var list, index, objClassList;

        list = classes.split(' ');

        for(var i in list)
        {
            if(this.classList)
            {
                this.classList.toggle(list[i])
            }
            else
            {
                /** Split the class */
                objClassList = this.className.split(' ');
                /** Is the class in class list already? */
                index = list.indexOf(list[i]);

                /** If already existed, we remove it, otherwise we add it */
                if(index >= 0)
                    objClassList.splice(index, 1);
                else
                    objClassList.push(list[i]);

                this.className = list[i].join(' ');
            }
        }
    });
}


/**
 * Get CSS
 */

jA.fn.getCss = function(property)
{
    /** Get computed style */
    try
    {
        return 0 in this ? document.defaultView.getComputedStyle(this[0], null).getPropertyValue(property) : null;
    }
    catch(err)
    {
        return null;
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/element/validate.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


jA.fn.validate = function()
{
    var jAthis    = jA(this),
        minlength = jAthis.attr('minlength'),
        maxlength = jAthis.attr('maxlength'),
        min       = jAthis.attr('min'),
        max       = jAthis.attr('max'),
        required  = jAthis.attr('required') != null,
        pattern   = jAthis.attr('pattern'),
        type      = jAthis.attr('type'),
        value     = jAthis.val();

    if(required && value == '')
        return 'required';

    if(minlength !== null && value.length < minlength)
        return 'minlegnth';

    if(maxlength !== null && value.length > maxlength)
        return 'maxlegnth';

    if(min !== null && parseInt(value) < min)
        return 'min';

    if(max !== null && parseInt(value) > max)
        return 'max';

    if(pattern !== null)
    {
        var regEx = new RegExp(pattern.replace(/\//g, ''));

        if(!regEx.test(value))
            return 'pattern';
    }

    if(type !== null && type == 'email' && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value))
        return 'email';

    return true;
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/element/dom.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * Wrap
 * 
 * Wrap an element.
 * 
 * @param mixed element   The element that we want to wrap it by.
 * 
 * @return mixed
 */
 
jA.fn.wrap = function(element)
{
    return this.each(function()
    {
        this.parentNode.insertBefore(element, this);
        element.appendChild(this);
    });
}



jA.fn.append = function(html)
{
    if(html != null && typeof html == 'object')
        return this.each(function(){ this.appendChild(html); });
    else if(html != null)
        return this.each(function(){ this.innerHTML += html; });
}

jA.fn.after = function(html)
{
    if(html != null)
        return this.each(function(){ this.insertAdjacentHTML('afterend', html); });
}

jA.fn.before = function(html)
{
    if(html != null)
        return this.each(function(){ this.insertAdjacentHTML('beforeBegin', html); });
}

jA.fn.prepend = function(html)
{
    if(html != null)
        return this.each(function(){ this.parentNode.insertBefore(html, this.nextSibling); });
}

jA.fn.appendTo = function(selector)
{
    return this.each(function()
    {
        var that = this;
        
        jA(selector).each(function()
        {
            this.appendChild(that, this.nextSibling);  
        });
    })
}

jA.fn.prependTo = function(selector)
{
    return this.each(function()
    {
        var that = this;
        
        jA(selector).each(function()
        {
            this.insertBefore(that, this.firstChild);
        });
    })
}

jA.fn.insertAfter = function(selector)
{
    return this.each(function()
    {
        var that = this;
        
        jA(selector).each(function()
        {
            this.parentNode.insertBefore(that, this.nextSibling);
        });
    })
}

jA.fn.insertBefore = function(selector)
{
    return this.each(function()
    {
        var that = this;
        
        jA(selector).each(function()
        {
            this.insertAdjacentHTML('beforeBegin', that);
        });
    })
}



jA.fn.clone = function(deep)
{
    /** Copy child too? */
    deep = (typeof deep == 'undefined') ? true : deep;

    var cloneList = [];
    
    /** Clone the elements */
    this.each(function()
    {
        cloneList.push(this.cloneNode(deep));
    });

    /** Using the elements which we cloned */
    return jA(cloneList);
}



jA.fn.remove = function()
{
    return this.each(function(){ this.parentNode.removeChild(this) });
}




jA.fn.children = function()
{
    var list = [];
        
    this.each(function(i, el)
    { 
        /** Get child nodes */
        var children = el.childNodes;
        
        /** Push the child nodes to the list*/
        list.push.apply(list, children);
    })
    
    /** Return the list with $ */
    return jA(list);
}



jA.fn.find = function(selector)
{
    /** The selector must be string */
    if(typeof selector !== 'string')
        return null;
    
    var list = [];

    this.each(function(i, el)
    { 
        /** Push the child nodes to the list*/
        list.push.apply(list, el.querySelectorAll(selector));
    });

    /** Return the list with $ */
    return list.length ? jA(list) : null;
}



        
        /**
         * Parent
         */
        
        jA.fn.parent = function()
        {
            return 0 in this ? jA(this[0].parentNode) : null;
        }
        
        
        

        jA.fn.parents = function(selector)
        {
            var that     = this,
                selector = selector || null,
                parents  = [];
            
            if(selector !== null)
                var selector = jA(selector);

            /** Non stop loop, until there's no parent of the element */
            while(that)
            {     
                /** Not this one, we go upper */
                that = jA(that).parent()[0];

                /** No parent? */
                if(!that)
                    break;
                
                /** Push to the parents list if it's in the selector or just push it if we don't set a selector */
                if(selector == null || (selector !== null && Array.prototype.indexOf.call(selector, that) !== -1))
                    parents.push(that);
            }
            
            return jA(parents);
        }
        
        
        
        

        jA.fn.closest = function(selector)
        {
            var that     = this,
                selector = jA(selector);

            /** Non stop loop, until there's no parent of the element */
            while(true)
            {     
                /** Not this one, we go upper */
                that = jA(that).parent()[0];

                /** No parent? */
                if(!that)
                    return null;
                
                /** Is the parent in the closest selector? If it do, then the parent is the closest element which we want */
                if(Array.prototype.indexOf.call(selector, that) !== -1)
                    return jA(that);
            }
        }
         
        

        jA.fn.contains = function(wants)
        {
            var selector = jA(wants),
                isTrue   = false;

            this.each(function(i, el)
            {
                var children = el.childNodes;
                
                for(var si = 0; si < selector.length; si++)
                {
                    if(Array.prototype.indexOf.call(children, selector[si]) != -1)
                        isTrue = true;
                }
            });

            return isTrue;
        }

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/element/visibility.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * Hide
 */

jA.fn.hide = function()
{
    return this.each(function()
    {
        jA(this).addClass('hidden');
    });
}




/**
 * Show
 */

jA.fn.show = function()
{
    return this.each(function()
    {
        jA(this).removeClass('hidden');
    });
}

    
jA.fn.isHidden = function()
{
    return jA(this).hasClass('hidden');
}
        
        

jA.fn.toggle = function()
{
    return this.each(function()
    {
        if(jA(this).hasClass('hidden'))
            jA(this).show();
        else
            jA(this).hide();
    })
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/form/serialize.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


jA.fn.serialize = function()
{
    var array = [];

    this.each(function()
    {
        var z, a;
        
        for (var z = 0; z < this.elements.length; z++)
        {
            var elements = this.elements[z],
                 name    = elements.name,
                 value   = elements.value;

            /** If element's name is empty or disabled or no value, we skip this one */
            if(!name || elements.disabled || !value)
                continue;

            switch (elements.nodeName)
            {
                case 'INPUT':
                    switch(elements.type)
                    {
                        case 'text'    :
                        case 'hidden'  :
                        case 'password':
                        case 'button'  :
                        case 'reset'   :
                        case 'submit'  :
                        case 'number'  :
                        case 'email'   :
                            array.push(name + '=' + encodeURIComponent(value));
                            break;

                        case 'checkbox':
                        case 'radio'   :
                            /** No checked, we skip. */
                            if(!elements.checked)
                                continue;

                            array.push(name + '=' + encodeURIComponent(value));
                            break;
                    }
                    break;

                case 'TEXTAREA':
                    array.push(name + '=' + encodeURIComponent(value));
                    break;

                case 'SELECT':
                    switch(elements.type)
                    {
                        case 'select-one':
                            array.push(name + '=' + encodeURIComponent(value));
                            break;

                        case 'select-multiple':
                            for(var a = 0; a < elements.options.length; a++)
                            {
                                var optionValue = elements.options[a].value;
                                
                                if (elements.options[a].selected)
                                    array.push(name + '=' + encodeURIComponent(optionValue));
                            }
                    }
                    break;

                case 'BUTTON':
                    switch(elements.type)
                    {
                        case 'reset' :
                        case 'submit':
                        case 'button':
                            array.push(name + '=' + encodeURIComponent(value));
                    }
            }  
         }
    });

    /** Prevent sending a object or array via XHR cause an error */
    return array.join('&').toString();
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/form/form-explode.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


jA.fn.formExplode = function()
{
    var formData = {};

    this.find('[name]').each(function()
    {
        formData[this.name] = this.value == '' ? undefined : this.value;
    });

    return formData;
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/form/form-validate.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


jA.fn.formValidate = function(rules, stopAtFirst)
{
    var pass    = true,
        isFirst = true;
        rules       = rules       || null,
        stopAtFirst = stopAtFirst || false;



    jA(this).find('[name]').each(function()
    {
        var jAthis     = jA(this),
            name       = this.getAttribute('name'),
            validation = jAthis.validate();

        if(!pass && !isFirst && stopAtFirst)
            return false;

        if(validation === true)
        {
            if(rules !== null && rules[name] !== undefined && rules[name].valid !== undefined)
                rules[name].valid.call(this);

            return true;
        }

        pass = false;

        if(rules !== null)
        {
            if(rules[name] !== undefined)
            {
                if(rules[name][validation] !== undefined)
                    rules[name][validation].call(this);

                if(rules[name].invalid !== undefined)
                    rules[name].invalid.call(this, name);

                isFirst = false;
            }
        }
    })

    return pass;
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/event/binder.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


jA.binder = function(binds, rebind)
{
    rebind = rebind || false;
    
    for(var i in binds)
    {
        /** Split the event and the target first */
        var splits  = i.split('|'),
        /** The first array is events */
            events  = splits[0],
        /** Split the targets */
            targets = splits[1].split('&');
        
        
        /** Detect what to bind based on different events */
        function bindThis(target, events, bind)
        {
            var event = events.split(' ');
            

            switch(target)
            {
                case ' window':
                case ' Window':
                    target = window;
                    break;
                
                case ' document':
                case ' Document':
                    target = document;
                    break;
            }
            

            for(var i in event)
            {
                var e = event[i];

                /** Different ways to bind with different events */
                if(e == 'scrollBottom')
                {
                    if(rebind)
                        jA(target).off('scroll');
                        
                    jA(target).scrollBottom(bind);
                }
                else if(e == 'ready')
                {
                    if(rebind)
                        jA(target).off('DOMContentLoaded');
                        
                    jA(target).ready(bind);
                }
                else if(e != '')
                {
                    if(rebind)
                        jA(target).off(e);
                        
                    jA(target).on(e, bind);
                }
            }
        }
        
        
        /** Each target */ 
        for(var t in targets)
            /** Bind each callback if it's a callback array */
            if(binds[i].isArray)
                for(var f in binds[i])
                    bindThis(targets[t], events, binds[i][f]);
            /** Or not, lol */
            else
                bindThis(targets[t], events, binds[i]);
    }
}


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/event/common.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */



jA.fn.mousedown = function(callback)
{
    return jA(this).on('mousedown', callback);
}

jA.fn.mouseup = function(callback)
{
    return jA(this).on('mouseup', callback);
}

jA.fn.keyup = function(callback)
{
    return jA(this).on('keyup', callback);
}

jA.fn.mousemove = function(callback)
{
    return jA(this).on('mousemove', callback);
}

jA.fn.click = function(callback)
{
    return jA(this).on('click', callback);
}

jA.fn.dragstart = function(callback)
{
    return jA(this).on('dragstart', callback);
}




jA.fn.longPress = function(callback, clickCallback, timer)
{
    /** If callback is not an number, which means it must be a function */
    if(!isNaN(clickCallback))
        timer = clickCallback;

    timer = timer || 500;

    return this.each(function()
    {
        jA(this).mousedown(function(event)
        {
            var that = this;
            /** Haven't trigger long press yet, so we set this to false */
            that.ts_longPressed    = false;

            this.ts_longPressTimer = setTimeout(function()
            {
                /** Call long press callback */
                callback.call(that);

                /** Long press has been triggered */
                that.ts_longPressed = true;

            }, timer);

            return false;
        })
        .mouseup(function(event)
        {
            /** If it's not long press, we call the 'click' callback */
            if(!this.ts_longPressed)
                if(typeof clickCallback !== 'undefined')
                    clickCallback.call(this);

            clearTimeout(this.ts_longPressTimer);
            return false;
        })
        .mousemove(function(event)
        {
            clearTimeout(this.ts_longPressTimer);
            return false;
        })
    })
}


jA.fn.trigger = function(Event)
{
    return this.each(function(){ this[Event]() });
}


jA.fn.scrollBottom = function(scroll, reachBottom)
{
    jA(this).on('scroll', function()
    {
        var distance = this.scrollHeight - this.scrollTop - this.clientHeight;

        /** Call ReachBottom if user scroll to the bottom */
        if(typeof scroll !== 'undefined' || scroll != null)
            scroll.call(this, distance); //Pass distance from the bottom to the function.

        /** Call ReachBottom if user scroll to the bottom */
        if(distance == 0 && typeof reachBottom !== 'undefined')
            reachBottom.call(this, distance);
    });
}


jA.fn.ready = function(callback)
{
    if(0 in this)
        this[0].addEventListener('DOMContentLoaded', callback)
}

jA.fn.focus = function()
{
    return this.each(function()
    {
        this.focus();
    });
}


jA.fn.isBottom = function()
{
    if(0 in this)
        if((this[0].scrollHeight - this[0].scrollTop - this[0].clientHeight) == 0)
            return true;
    else
        return false;
}


jA.fn.delayKeyup = function(callback, ms)
{
    return this.each(function()
    {
        var timer = 0,
            el    = jA(this),
            that  = this;

         jA(this).keyup(function(event)
         {
             var event = event;

            clearTimeout(timer);

            timer = setTimeout(function()
            {
                 callback.call(that, event)
            }, ms);
         });
    })

}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/event/handler.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


jA.fn.on = function(eventName, selector, handler, once)
{
    once            = once || false
    var hasSelector = true
    
    if(typeof selector !== 'string')
    {
        hasSelector = false
        handler     = selector
    }
    
    if(typeof handler !== 'function')
        once = handler
    
    /**
     * [ts_eventHandler]
     *
     *        registered   :bool
     *      /
     * Click      func :func
     *      \   /
     *       [0] 
     *          \
     *            once :bool         
     */
    
    return this.each(function()
    {
        if(typeof this.addEventListener == 'undefined')
        {
            console.log('TOCAS ERROR: Event listener is not worked with this element.');
            return false;
        }
        
        /** If the main event list of the element is not existed, we create one */
        if(typeof this.ts_eventHandler == 'undefined')
            this.ts_eventHandler = {};
        
        /** Split the event by space */
        var events = eventName.split(' ');
        
        for(var i in events)
        {
            var event = events[i];
            
            /** If the event handler list is not existed, we create an object, we will store function in here */
            /** so if someone triggered the event, we can just call this list. */
            if(typeof this.ts_eventHandler[event] == 'undefined')
                this.ts_eventHandler[event] = {registered: false, list: []};
            
            /** Bind if haven't bind yet */
            if(this.ts_eventHandler[event].registered === false)
            {
                this.addEventListener(event, function(evt)
                {
                    /** Just make sure this event still existed */
                    if(typeof this.ts_eventHandler[event] != 'undefined')
                    {
                        /** Execute all of the functions */
                        for(var e in this.ts_eventHandler[event].list)
                        {
                            /** If there's a selector */
                            if(typeof this.ts_eventHandler[event].list[e].selector !== 'undefined')
                            {
                                var inSelector = false;
                                
                                /** If this element is in the selector, then we set InSelector as true */
                                jA(this.ts_eventHandler[event].list[e].selector).each(function(i, el)
                                {
                                    if(evt.target === el) inSelector = true;
                                })
                                
                                /** We won't call this function if this elements which is triggered is not in the selector */
                                if(!inSelector) return;
                            }
                            
                            /** Execute */
                            this.ts_eventHandler[event].list[e].func.call(this, evt);
                            
                            /** If "once" is true, we remove it after call it */
                            if(this.ts_eventHandler[event].list[e].once)
                                delete this.ts_eventHandler[event].list[e];
                        }
                    }
                })
                
                this.ts_eventHandler[event].registered = true;
            }

            /** Push handler or anonymous function into that event list */
            var eventHandler = this.ts_eventHandler[event].list,
                data         = {func: handler, once: once};
            
            /** Store the selector if there's selector */     
            if(hasSelector)
                data.selector = selector;
                
            /** Store the function info*/
            eventHandler.push(data);
            
            this.ts_eventHandler[event].list = eventHandler;
        }
    })
}



jA.fn.one = function(eventName, selector, handler)
{   
    return this.each(function()
    {
        /** Set "once" true, it will auto remove once we call it */
        jA(this).on(eventName, selector, handler, true);
    });
}

        


jA.fn.off = function(eventName, handler)
{
    return this.each(function()
    {
        /** No list no talk */
        if(typeof this.ts_eventHandler            == 'undefined') return;
        if(typeof this.ts_eventHandler[eventName] == 'undefined') return;

        /** If there's no handler name, we remove all handler */
        if(handler == null)
        {
            this.ts_eventHandler[eventName].list = [];
            return; 
        }
        
        /** Otherwise we search for the index of function, then remove it */
        for(var e in this.ts_eventHandler[eventName].list)
            if(handler === this.ts_eventHandler[eventName].list[e].func) 
                delete this.ts_eventHandler[eventName].list[e];
    });
}





/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/extend/avg-color.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * Avg Color
 * 
 * Converts an image to canvas and return the average color of the image.
 * 
 * @param string type   The color we want to get: R, G, B, RGB.
 * 
 * @return int|string
 */
 
jA.fn.avgColor = function(type)
{
    type = type || null;
    
    if(0 in this)
    {
        var img = this[0];
            
        /** Create a canvas for getting avg color */
        var canvas    = document.createElement('canvas');
        canvas.width  = img.width;
        canvas.height = img.height;
        
        /** Draw this picture to the canvas */
        var context = canvas.getContext('2d');
        context.drawImage(img, 0, 0, img.width, img.height);

        if(img.width <= 0 || img.height <= 0)
            return false;
        
        /** Get the result of the pixels */
        var data = context.getImageData(0, 0, img.width, img.height).data,
            r    = 0, g = 0, b = 0;

        /** Get the all average of the pixels */
        for (var row = 0; row < img.height; row++)
        {
            for (var col = 0; col < img.width; col++)
            {
                r += data[((img.width * row) + col) * 4];
                g += data[((img.width * row) + col) * 4 + 1];
                b += data[((img.width * row) + col) * 4 + 2];
            }
        }

        r /= (img.width * img.height);
        g /= (img.width * img.height);
        b /= (img.width * img.height);

        r = Math.round(r);
        g = Math.round(g);
        b = Math.round(b);

        if(type !== null)
        {
            switch(type.toUpperCase())
            {
                case 'R'   : return r; break;
                case 'G'   : return g; break;
                case 'B'   : return b; break;
                case 'RGB' : return [r, g, b]; break;
            }
        }
        
        /** Return the color with 16 bits */
        return '#' + ((r << 16) | (g << 8) | b).toString(16);
    }
    else
    {
        return null;
    }
};

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/extend/gen-date.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


jA.fn.genDate = function(type, direction)
{
    type      = type      || 'day';
    direction = direction || 'past';
    
    var now = new Date();

    return this.each(function(index, el)
    {
        var year  = now.getFullYear(),
            month = 1,
            day   = 1;
                
        switch(type)
        {
            case 'year':
                for(var i = 0; i < 110; i++)
                {
                    var option      = document.createElement('option');
                        option.text = (direction == 'Past') ? year-- : year++;
                    el.add(option);
                }
                break;

            case 'month':
                for(var i = 0; i < 12; i++)
                {
                    var option      = document.createElement('option');
                        option.text = (month < 10) ? '0' + month : month;
                        
                    month++;
                    el.add(option);
                }
                break;
             
            case 'day':
                for(var i = 0; i < 31; i++)
                {
                    var option      = document.createElement('option');
                        option.text = (day < 10) ? '0' + day : day;
                        
                    day++;
                    el.add(option);
                }
                break;
        }
    });
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/extend/geo.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


jA.geo = function(option)
{
    if(typeof option == 'undefined')
        return false;
    
    /** Check some options is set or null, and gives some options a default value */
    var notSupported = typeof option.notSupported == 'function',
        error        = typeof option.error        == 'function',
        deny         = typeof option.deny         == 'function',
        highAccurary = typeof option.highAccurary != 'undefined' ? option.highAccurary : false,
        timeout      = typeof option.timeout      == 'number'    ? option.timeout      : 8000,
        maxAge       = typeof option.maxAge       == 'number',
        isFirefox    = navigator.userAgent.toLowerCase().indexOf('firefox') > -1,
        opt          = {
                           enableHighAccuracy: highAccurary, 
                           timeout           : timeout
                       };
                       
    /** Set the maximumAge if needed */
    if(maxAge) 
        opt.maximumAge = maxAge;
    
    /** Set the timer for the firefox */
    /** Firefox won't give us "Denied" status, so the only thing we can do is waiting for it timeout to call deny callback*/
    if(isFirefox)
        if(error)
            var firefoxTimer = setTimeout(function(){ option.error(3) }, timeout);
        else if(deny)
            var firefoxTimer = setTimeout(option.deny, timeout);
    
    /** Use the geolocation function if the borwser was supported the HTML5 geolocation */
    if(navigator.geolocation)
        navigator.geolocation.getCurrentPosition(function(position)
        {
            /** Clean the firefox "denied" timer */
            if(isFirefox)
                clearTimeout(firefoxTimer);
            
            /** Call to the success callback */
            option.success(position);
        },
        function(errorCode)
        {
            var denied    = (errorCode.code == errorCode.PERMISSION_DENIED);

            /** Clean the firefox "denied" timer */
            if(isFirefox)
                clearTimeout(firefoxTimer);
            
            /** Call error if error callback exists or deny callback when the callback exists and user denied it */
            if(error)
                option.error(errorCode);
            else if(deny && denied)
                option.deny();
            
        }, opt)
    /** Otherwise we call the notSupported callback if existed */
    else
        if(notSupported)
            option.notSupported();
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/extend/url-param.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


jA.urlParam = function(paramName)
{
    /** Are we getting all parameters or just a special one? */
    var getAll    = (typeof paramName === 'undefined'),
    
    /** Get the parameters which are behind the question mark, and split it with & symbol, so we'll get an array */
        params    = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&'),
        paramList = {}
    
    if(params.length == 0)
        return null;
    
    for(var i in params)
    {
        /** Split single parameter, so [0] is the name, [1] is the value */
        var param = params[i].split('='),
            name  = param[0],
            value = (typeof param[1] !== 'undefined' && param[1] != '') ? param[1] : ''; //Return the value or just a empty string
        
        /** This is the param which we are looking for, so we return the value! */
        if(name == paramName)
            return value;
        
        /** We don't store the param which we are NOT looking for if we are NOT getting the all params */
        if(!getAll && name != paramName)
            continue;
        
        /** Otherwise we push it into an object */
        paramList[name] = value;
    }
    
    /** Return undefined if no param is found */
    return (Object.keys(paramList).length) ? paramList : undefined;
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/form/serialize.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


jA.fn.serialize = function()
{
    var array = [];

    this.each(function()
    {
        var z, a;
        
        for (var z = 0; z < this.elements.length; z++)
        {
            var elements = this.elements[z],
                 name    = elements.name,
                 value   = elements.value;

            /** If element's name is empty or disabled or no value, we skip this one */
            if(!name || elements.disabled || !value)
                continue;

            switch (elements.nodeName)
            {
                case 'INPUT':
                    switch(elements.type)
                    {
                        case 'text'    :
                        case 'hidden'  :
                        case 'password':
                        case 'button'  :
                        case 'reset'   :
                        case 'submit'  :
                        case 'number'  :
                        case 'email'   :
                            array.push(name + '=' + encodeURIComponent(value));
                            break;

                        case 'checkbox':
                        case 'radio'   :
                            /** No checked, we skip. */
                            if(!elements.checked)
                                continue;

                            array.push(name + '=' + encodeURIComponent(value));
                            break;
                    }
                    break;

                case 'TEXTAREA':
                    array.push(name + '=' + encodeURIComponent(value));
                    break;

                case 'SELECT':
                    switch(elements.type)
                    {
                        case 'select-one':
                            array.push(name + '=' + encodeURIComponent(value));
                            break;

                        case 'select-multiple':
                            for(var a = 0; a < elements.options.length; a++)
                            {
                                var optionValue = elements.options[a].value;
                                
                                if (elements.options[a].selected)
                                    array.push(name + '=' + encodeURIComponent(optionValue));
                            }
                    }
                    break;

                case 'BUTTON':
                    switch(elements.type)
                    {
                        case 'reset' :
                        case 'submit':
                        case 'button':
                            array.push(name + '=' + encodeURIComponent(value));
                    }
            }  
         }
    });

    /** Prevent sending a object or array via XHR cause an error */
    return array.join('&').toString();
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/protocol/ajax.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


jA.ajax = function(obj, type)
{
    if(obj == null)
        return false;

    /** Is error handler existed or not */
    var errorCallback = typeof obj.error !== 'undefined',
        isObjectData  = typeof obj.data  === 'object' && obj.data.constructor != FormData;

    /** Default */
    if(typeof obj.async === 'undefined')
        obj.async = true;
    if(typeof obj.contentType === 'undefined' || obj.contentType == null)
        obj.contentType = 'application/x-www-form-urlencoded; charset=UTF-8';

    var XHR = new XMLHttpRequest();

    /** Set timeout */
    XHR.timeout = obj.timeout || 10000;

    XHR.onload = function()
    {
        /** Call to statusCode if existed */
        if(typeof obj.statusCode != 'undefined' && typeof obj.statusCode[XHR.status] != 'undefined')
            obj.statusCode[XHR.status](XHR, XHR.responseText);

        if(XHR.status >= 200 && XHR.status < 400)
        {

            switch(obj.dataType)
            {
                case 'json':
                    if(jA.isJSON(XHR.responseText))
                        obj.success(JSON.parse(XHR.responseText), XHR);
                    else
                        if(errorCallback) obj.error(XHR, 'parsererror');
                    break;
                case 'html':
                case 'text':
                case 'string':
                default:
                    if(typeof obj.success == 'function')
                        obj.success(XHR.responseText, XHR);

                    if(typeof XHR.close == 'function')
                        XHR.close();
            }
        }
        else
        {
            if(errorCallback)
                obj.error(XHR, 'success');
        }
    }

    /** When XHR timeout or error, we callback */
    XHR.ontimeout = function(){ if(errorCallback) obj.error(XHR, 'timeout'); };
    XHR.onerror   = function(){ if(errorCallback) obj.error(XHR, 'error'); };

    /** If there's uploading process callback, we callback :D */
    if(typeof obj.uploading != 'undefined')
    {
        XHR.upload.addEventListener('progress', function(e)
        {
            if(e.lengthComputable)
            {
                var percent = Math.round((e.loaded / e.total) * 100);
                obj.uploading(percent, e);
            }
        }, false);
    }

    /** Open a new connect */
    XHR.open(obj.type, obj.url, obj.async);

    /** If contentType is not FALSE, we set the request header */
    if(obj.contentType != false)
        XHR.setRequestHeader('Content-Type', obj.contentType);

    /** Set headers */
    if(typeof obj.headers != 'undefined')
        for(var i in obj.headers)
            XHR.setRequestHeader(i, obj.headers[i]);

    /** If data is an object, we convert it to params */

    if(isObjectData)
    {
        /** explode the object into a string */
        var params = '';

        for(var i in obj.data)
            if(obj.data[i] !== undefined)
                params += i + '=' + obj.data[i] + '&' ;

        /** Remove the unnecessary symbol at the end */
        params = params.slice(0, -1);
    }

    /** SENDDDD! */
    XHR.send((isObjectData) ? params : obj.data);

    return XHR;
}








jA.getJSON = function(url, callback)
{
    return jA.ajax({
        url: url,
        type: 'GET',
        dataType: 'json',
        success: callback,
    });
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/protocol/pjax.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */



jA.pjax = function(option)
{
    /**
     * Option
     * {
     *     container: '#content',
     *     url: jA(this).attr('href'),
     *     title: jA(this).attr('data-title')
     *     dataType: 'json',
     *     contentNode: 'html',
     *     titleNode: 'title',
     *     cache: true,
     *     expire: 86400,
     *     state: {blah: 'Im blah'},
     *     success: function
     * }
     */
    
    if(typeof history.pushState !== 'function')
        return false;
    
    /** Check url hostname */
    var fakeLink      = document.createElement('a');
        fakeLink.href = option.url;
        
    //if(fakeLink.host == '')
    //    fakeLink.href = fakeLink.href;

    /** PJAX only works in same origin, so exit when cross-origin */
    if(fakeLink.hostname !== window.location.hostname)
        return false;

    var pjaxFullURL = fakeLink.protocol + '//' + fakeLink.hostname + fakeLink.pathname,
        fullURL     = window.location.protocol + '//' + window.location.hostname + window.location.pathname;
    
    /** Exit if the pjax url is just about add a hash or a anchor or even same */
    if(pjaxFullURL === fullURL)
        return false;
    


    /**
     * PJAX
     */
    
    function pjax(obj)
    {
         /** Change the content */
        jA(obj.Container).html(obj.Content);

        /** Change the url */
        window.history.pushState(obj.State, obj.Title, obj.URL);

        /** Change the title */
        document.title = obj.Title;
        
        /** Callback */
        if(typeof option.success != 'undefined')
            option.success(obj);
        
    }
    
    
    /** Set variables */
    var title      = option.title    || '', 
        dataType   = option.dataType || 'html',
        url        = option.url,
        expire     = option.expire   || 3600,
        cache      = option.cache    || false,
        cachedName = 'cached_' + url;
    
    /** Create a state with url and title */
    var state = {url: url, title: title};
            
    /** Merge state if needed */
    if(typeof option.state !== 'undefined')
        for(var i in option.state)
            state[i] = option.state[i];
           
    
    /**
     * Cache
     */

    /** If there's a cache in the storage */
    if(cachedName in localStorage && cache)
    {
        /** We stored JSON format in localStorage before, now we need to convert it to object */
        var obj = JSON.parse(localStorage.getItem(cachedName));

        /** If the state still same, we load the cache */
        /** But if we are using dynamic title(which is returned title as title), no matter what, just load the cache */
        if(JSON.stringify(obj.State) === JSON.stringify(state) || title === '')
        {
            var time = Math.floor(Date.now() / 1000) - obj.time;
            
            /** Just be sure if it's not expired yet */
            if(expire && !(time > expire))
            {
                pjax(obj);
                return;
            }
        }
    }
    
    
    /**
     * Request 
     */
    
    jA.ajax(
    {
        url     : url,
        type    : 'GET',
        dataType: dataType,
        /** Send a PJAX header, so we can deal with it on the server side */
        headers: {'X_HTTP_PJAX': 'true'},
        success: function(result, xhr)
        {
            var title     = (option.dataType == 'json') ? result[option.titleNode]   : option.title,
                content   = (option.dataType == 'json') ? result[option.contentNode] : result,
                scriptTag = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;

            if(option.dataType == 'json' && typeof result[option.titleNode] == 'undefined')
                if(typeof option.title != 'undefined')
                    title = option.title;
                else
                    title = '';
            
            if(option.dataType == 'json' && typeof result[option.contentNode] == 'undefined')
                content = result;
                
            /** Remove the script in the content */
            content = content.replace(scriptTag, ' ');
            
            /** Replace the title in the state */
            state['title'] = title;
    
            var data = {container: Option.container, 
                        content: content,
                            url: url,
                          title: title,
                          state: state,
                           time: Math.floor(Date.now() / 1000)};
            
            /** Store this PJAX to web storage as cache, localStorage don't eat object, so we conver it to json format */
            localStorage.setItem(cachedName, JSON.stringify(data));
            
            pjax(data);
        }
    });
}





/**
 * Load
 *
 * Load a html by XHR, then push the content to this element.
 */

jA.fn.load = function(url, data, callback)
{
    if(!this.length)
        return this;
    
    return this.each(function()
    {
        var that    = this,
            options = {type: 'POST',
                       url: url,
                       dataType: 'html',
                       data: data},
            /** Split URL to two parts, first one is the URL, second one is the selector */
            split = url.split(/\s/), selector;
        
        /** If selector is existed, then we get it */
        if(split.length > 1)
            options.url = split[0];
            selector    = split[1];
        
        options.success = function(result)
        {
            var scriptTag = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;

            /** Replace the html, use selector if existed */
            jA(that).html(selector ? jA(document.createElement('div')).html(result.replace(scriptTag, ' ')).find(selector).html() : result);
        }
        
        jA.ajax(options);
    });
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/protocol/sse.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * Event Source
 *
 * We called it SSE here, get newest update, blah blah..
 */

jA.sse = function(obj)
{
    var sse = new EventSource(obj.url);
    
    /** Message */
    if(typeof obj.message == 'object') 
        for(var i in obj.message)
            sse.addEventListener(i, obj.message[i], false);
    else if(typeof obj.message !== 'undefined')
        sse.onmessage = obj.message;
        
    /** Error */
    if(typeof obj.error !== 'undefined')
        sse.onerror = obj.error;
        
    /** Open */
    if(typeof obj.open !== 'undefined')
        sse.addEventListener('open', obj.open, false);
}


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: src/protocol/rest.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


jA.post = function(url, data, callback)
{
    callback = callback || null;

    var d = new jA.deferred();


    jA.ajax({
        url     : url,
        type    : 'POST',
        dataType: 'json',
        data    : data,
        error   : function(r){d.reject(r)},
        success : function(r){d.resolve(r)}
    });


    return d;
}


jA.get = function(url, data)
{
    data = data || null;

    var d = new jA.deferred();

    if(data !== null)
    {
        /** explode the object into a string */
        var params = '';

        for(var i in data)
            params += i + '=' + data[i] + '&' ;

        /** Remove the unnecessary symbol at the end */
        params = '?' + params.slice(0, -1);
    }

    jA.ajax({
        url     : url + params,
        type    : 'GET',
        dataType: 'json',
        error   : function(r){d.reject(r)},
        success : function(r){d.resolve(r)}
    });


    return d;
}